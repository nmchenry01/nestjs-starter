var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/AccessToken.html",[0,0.117,1,2.034]],["body/classes/AccessToken.html",[0,0.168,1,3.496,2,1.301,3,0.351,4,0.305,5,0.305,6,4.074,7,0.447,8,1.56,9,5.233,10,0.551,11,0.025,12,1.359,13,0.782,14,4.825,15,0.351,16,0.018,17,0.022,18,0.018]],["title/modules/AppModule.html",[19,1.278,20,2.24]],["body/modules/AppModule.html",[0,0.118,3,0.247,4,0.215,5,0.215,11,0.027,15,0.247,16,0.013,17,0.018,18,0.013,19,1.992,20,4.393,21,1.6,22,1.73,23,2.05,24,2.05,25,1.6,26,2.05,27,2.05,28,2.865,29,2.865,30,3.364,31,3.674,32,3.099,33,3.674,34,2.79,35,2.05,36,2.05,37,3.393,38,3.425,39,0.732,40,0.797,41,3.393,42,2.257,43,2.517,44,1.6,45,3.393,46,3.072,47,3.393,48,3.393,49,3.072,50,3.393,51,3.393,52,3.393,53,3.393,54,3.393,55,2.257,56,3.393,57,3.393,58,2.865]],["title/controllers/AuthController.html",[59,1.716,60,2.034]],["body/controllers/AuthController.html",[0,0.078,1,2.074,3,0.164,4,0.142,5,0.142,7,0.209,10,0.602,11,0.026,13,0.556,15,0.164,16,0.009,17,0.013,18,0.009,39,0.662,40,0.528,59,1.147,60,2.074,61,1.147,62,1.9,63,1.67,64,2.25,65,1.216,66,2.691,67,4.159,68,4.159,69,2.25,70,2.921,71,1.398,72,2.546,73,2.115,74,5.799,75,2.45,76,3.432,77,1.895,78,3.432,79,4.653,80,3.452,81,2.25,82,1.9,83,2.898,84,2.25,85,3.929,86,2.812,87,2.25,88,2.25,89,1.303,90,1.135,91,1.135,92,1.135,93,1.895,94,2.25,95,2.921,96,5.279,97,1.502,98,2.25,99,3.432,100,2.898,101,2.25,102,2.25,103,2.25,104,1.9,105,1.9,106,1.9,107,1.67,108,3.086,109,3.512,110,3.432,111,3.512,112,2.898,113,2.898,114,1.497,115,2.302,116,1.9,117,1.67,118,1.899,119,1.67,120,1.67,121,1.9,122,1.245,123,1.36,124,1.694,125,1.36,126,2.25,127,2.25,128,1.147,129,1.619,130,2.25,131,2.546,132,1.75,133,1.9,134,2.074,135,2.25,136,3.432,137,2.546,138,1.9,139,2.546,140,2.898,141,2.25,142,1.216,143,2.25,144,1.67,145,1.67,146,2.25,147,2.25,148,2.25]],["title/modules/AuthModule.html",[19,1.278,30,1.863]],["body/modules/AuthModule.html",[0,0.114,3,0.239,4,0.208,5,0.208,11,0.027,15,0.239,16,0.013,17,0.017,18,0.013,19,1.96,21,1.551,22,1.676,23,1.987,24,1.987,25,1.551,26,3.12,27,3.12,30,3.528,32,3.07,34,2.731,35,1.987,36,1.987,38,3.353,39,0.736,40,0.772,43,2.439,44,1.551,58,2.776,60,3.12,61,2.304,115,3.333,116,2.776,149,2.776,150,3.288,151,2.776,152,2.776,153,3.797,154,3.288,155,3.288,156,2.188,157,4.519,158,2.188,159,3.288,160,1.676,161,2.439,162,3.007,163,3.288,164,3.288,165,2.776,166,3.288,167,3.288,168,3.288,169,2.188,170,3.288]],["title/injectables/AuthService.html",[115,1.863,171,1.278]],["body/injectables/AuthService.html",[0,0.106,1,1.849,3,0.223,4,0.194,5,0.194,7,0.284,9,3.63,10,0.567,11,0.027,13,0.805,15,0.223,16,0.012,17,0.016,18,0.012,39,0.716,40,0.719,44,1.444,65,1.523,66,3.002,70,3.143,73,1.012,89,1.887,90,1.644,91,1.644,92,1.422,93,2.196,95,3.143,115,2.379,117,2.271,118,1.694,119,2.271,120,2.271,121,2.584,128,2.192,129,2.028,142,1.523,156,2.036,160,3.002,161,2.271,171,1.632,172,1.694,173,2.584,174,3.63,175,3.63,176,2.584,177,6.048,178,3.06,179,3.63,180,3.06,181,3.63,182,3.06,183,2.271,184,2.271,185,3.06,186,3.06,187,1.882,188,1.694,189,2.379,190,3.06,191,3.06]],["title/interfaces/Configuration.html",[49,2.24,192,1.716]],["body/interfaces/Configuration.html",[3,0.284,4,0.247,5,0.247,7,0.362,8,1.367,10,0.753,11,0.026,12,1.486,15,0.284,16,0.015,17,0.019,18,0.015,39,0.445,40,0.917,49,3.372,77,1.59,86,3.6,90,1.291,132,1.99,169,3.964,192,1.99,193,2.597,194,3.296,195,4.42,196,6.327,197,5.628,198,3.296,199,4.28,200,4.28,201,3.296,202,3.903,203,3.296,204,3.296]],["title/classes/CreateTaskDTO.html",[0,0.117,205,1.588]],["body/classes/CreateTaskDTO.html",[0,0.179,2,1.076,3,0.29,4,0.252,5,0.252,7,0.37,8,1.387,10,0.649,11,0.026,12,1.411,13,0.921,15,0.29,16,0.015,17,0.02,18,0.015,39,0.587,71,2.317,75,2.317,205,2.425,206,3.37,207,2.49,208,3.148,209,5.142,210,3.991,211,2.9,212,3.991,213,3.991,214,3.991,215,4.457,216,3.437,217,2.961,218,2.209,219,2.209,220,2.961]],["title/classes/CreateUserDTO.html",[0,0.117,95,1.863]],["body/classes/CreateUserDTO.html",[0,0.176,2,1.053,3,0.284,4,0.247,5,0.247,7,0.362,8,1.367,10,0.578,11,0.026,12,1.399,13,0.821,15,0.369,16,0.015,17,0.019,18,0.015,39,0.445,71,2.065,77,2.293,95,2.805,97,1.709,132,3.147,145,3.76,187,1.709,215,4.176,216,3.401,218,2.16,221,2.896,222,3.296,223,4.28,224,5.068,225,5.068,226,3.903,227,3.296,228,3.903,229,3.296,230,3.903,231,2.597,232,3.296,233,3.296,234,3.296,235,3.296,236,3.296]],["title/classes/CreateUserResponse.html",[0,0.117,118,1.863]],["body/classes/CreateUserResponse.html",[0,0.155,2,1.203,3,0.325,4,0.282,5,0.282,7,0.414,8,1.487,10,0.683,11,0.025,12,1.469,13,0.97,15,0.325,16,0.017,17,0.021,18,0.017,77,2.439,118,3.052,237,3.766,238,3.052,239,2.439,240,3.67,241,4.46,242,4.46,243,4.46]],["title/classes/FilterTaskDTO.html",[0,0.117,244,1.588]],["body/classes/FilterTaskDTO.html",[0,0.183,2,1.118,3,0.302,4,0.262,5,0.262,7,0.385,8,1.421,10,0.601,11,0.026,12,1.237,13,0.854,15,0.302,16,0.016,17,0.02,18,0.016,39,0.601,71,2.146,91,2.016,207,2.536,211,2.953,216,3.184,217,3.077,218,2.295,219,2.295,220,3.077,244,2.486,245,3.502,246,4.89,247,3.502,248,4.147,249,3.502,250,4.147,251,4.89]],["title/controllers/HealthController.html",[59,1.716,252,2.24]],["body/controllers/HealthController.html",[0,0.133,3,0.278,4,0.242,5,0.242,7,0.354,10,0.57,11,0.026,13,0.619,15,0.278,16,0.015,17,0.019,18,0.015,39,0.636,40,0.897,59,1.947,61,1.947,63,2.834,65,1.77,71,1.556,72,2.834,75,2.269,86,3.705,92,1.263,107,2.834,108,3.707,114,2.541,131,2.834,142,1.353,207,2.438,252,3.325,253,3.225,254,5.569,255,5.907,256,4.997,257,3.819,258,5.569,259,3.819,260,3.819,261,3.931,262,4.219,263,3.819,264,3.819,265,3.819]],["title/modules/HealthModule.html",[19,1.278,31,2.034]],["body/modules/HealthModule.html",[0,0.165,3,0.346,4,0.301,5,0.301,11,0.026,15,0.346,16,0.018,17,0.022,18,0.018,19,2.179,21,2.245,31,3.468,39,0.655,40,1.118,61,2.926,252,4.099,266,4.76,267,4.76]],["title/classes/HealthResponse.html",[0,0.117,261,2.24]],["body/classes/HealthResponse.html",[0,0.168,2,1.301,3,0.351,4,0.305,5,0.305,7,0.447,8,1.56,10,0.551,11,0.025,12,1.359,13,0.782,15,0.351,16,0.018,17,0.022,18,0.018,207,2.713,261,3.85,268,4.074,269,4.825]],["title/interfaces/ITaskService.html",[192,1.716,270,2.034]],["body/interfaces/ITaskService.html",[3,0.209,4,0.182,5,0.182,7,0.267,10,0.633,11,0.026,12,1.453,13,0.899,15,0.209,16,0.011,17,0.016,18,0.011,39,0.633,65,1.458,73,2.242,89,2.106,90,1.835,91,1.835,92,1.835,93,2.557,192,1.467,193,1.915,205,2.803,239,2.475,244,2.803,270,2.487,271,2.43,272,2.487,273,3.054,274,3.054,275,2.487,276,3.197,277,2.487,278,2.878,279,3.054,280,2.878,281,3.054,282,2.878,283,2.487,284,2.878,285,1.915,286,3.029,287,2.878,288,1.358,289,1.739,290,1.739,291,1.593,292,1.739,293,1.915]],["title/injectables/JwtConfigService.html",[162,2.24,171,1.278]],["body/injectables/JwtConfigService.html",[0,0.138,3,0.288,4,0.251,5,0.251,7,0.367,10,0.452,11,0.027,13,0.829,15,0.288,16,0.015,17,0.02,18,0.015,39,0.647,40,0.93,42,2.636,65,1.813,89,1.504,90,1.311,91,1.311,92,1.311,128,2.02,142,1.403,156,2.636,162,3.405,171,1.943,172,2.192,203,3.345,204,3.345,294,3.345,295,5.99,296,3.345,297,5.364,298,3.962,299,3.962,300,5.668,301,5.117,302,2.636,303,3.345,304,3.962,305,3.962,306,3.962]],["title/interfaces/JwtPayload.html",[188,1.863,192,1.716]],["body/interfaces/JwtPayload.html",[3,0.351,4,0.305,5,0.305,7,0.447,8,1.56,10,0.551,11,0.025,12,1.455,15,0.351,16,0.018,17,0.022,18,0.018,77,2.617,188,3.202,192,2.46,193,3.211,307,4.074]],["title/classes/JwtStrategy.html",[0,0.117,153,2.034]],["body/classes/JwtStrategy.html",[0,0.116,2,0.898,3,0.242,4,0.211,5,0.211,7,0.309,10,0.52,11,0.027,13,0.738,15,0.242,16,0.013,17,0.017,18,0.013,39,0.706,40,0.782,44,1.57,65,1.614,66,2.649,73,1.849,77,2.117,89,1.73,90,1.508,91,1.508,92,1.101,93,1.856,97,1.457,128,1.697,129,1.57,142,1.179,153,2.754,158,2.215,160,3.082,161,2.47,169,2.215,176,2.811,183,2.47,184,2.47,187,1.995,188,3.093,189,1.842,308,2.811,309,4.557,310,3.329,311,4.557,312,3.329,313,4.557,314,3.329,315,3.329,316,3.329,317,2.811,318,2.811,319,2.811,320,1.842,321,3.329,322,3.329,323,3.329,324,3.329,325,3.329,326,3.329,327,3.329,328,3.329,329,2.215,330,3.329,331,2.811]],["title/modules/LoggerModule.html",[19,1.278,32,1.716]],["body/modules/LoggerModule.html",[0,0.145,3,0.303,4,0.263,5,0.263,11,0.026,15,0.303,16,0.016,17,0.02,18,0.016,19,2.203,21,1.964,22,2.123,23,2.516,24,2.516,25,1.964,26,3.506,27,3.506,32,3.333,34,3.192,35,2.516,36,2.516,39,0.603,40,0.978,124,2.773,332,3.516,333,3.516,334,3.516,335,4.163,336,4.163]],["title/injectables/LoggerService.html",[124,1.371,171,1.278]],["body/injectables/LoggerService.html",[0,0.166,3,0.348,4,0.302,5,0.302,11,0.026,15,0.348,16,0.018,17,0.022,18,0.018,39,0.546,40,1.123,124,2.344,171,2.185,172,2.646,320,3.184,337,4.038,338,6.173,339,5.754,340,4.782]],["title/classes/SignInUserDTO.html",[0,0.117,70,1.863]],["body/classes/SignInUserDTO.html",[0,0.181,2,1.097,3,0.296,4,0.257,5,0.257,7,0.377,8,1.404,10,0.594,11,0.026,12,1.421,13,0.843,15,0.296,16,0.016,17,0.02,18,0.016,39,0.594,70,2.88,71,2.12,77,2.338,132,3.188,215,4.258,216,3.468,218,2.251,222,3.435,223,4.395,227,3.435,229,3.435,231,2.707,236,3.435,331,4.395,341,3.435,342,4.068,343,4.068,344,4.068]],["title/classes/Task.html",[0,0.117,345,1.716]],["body/classes/Task.html",[0,0.103,2,0.802,3,0.216,4,0.188,5,0.188,7,0.276,8,1.137,10,0.699,11,0.026,12,1.439,13,0.993,15,0.216,16,0.011,17,0.016,18,0.011,39,0.558,71,2.497,73,2.028,75,1.993,90,1.394,207,2.143,208,2.708,211,2.495,219,1.646,238,2.495,239,1.993,240,3.542,291,1.646,320,2.332,345,2.148,346,2.512,347,4.132,348,2.957,349,3.625,350,4.132,351,2.975,352,4.132,353,2.975,354,5.176,355,2.975,356,3.558,357,2.975,358,2.975,359,2.975,360,2.975,361,2.975,362,2.975,363,2.975,364,2.975,365,3.558,366,2.512,367,2.975,368,4.214,369,1.798,370,2.975,371,2.975]],["title/controllers/TaskController.html",[59,1.716,372,2.034]],["body/controllers/TaskController.html",[0,0.043,3,0.09,4,0.078,5,0.078,7,0.114,10,0.572,11,0.026,12,1.102,13,0.594,15,0.09,16,0.005,17,0.008,18,0.005,39,0.587,40,0.29,59,0.629,61,0.629,63,0.916,65,0.747,66,2.782,71,1.493,72,2.719,73,2.057,75,2.508,80,3.336,82,1.042,85,4.106,86,2.939,89,1.516,90,1.213,91,1.411,92,1.213,93,1.981,97,1.208,104,1.78,105,2.756,106,1.042,107,0.916,108,2.963,109,3.372,111,1.78,112,2.756,113,3.372,114,0.821,122,0.683,123,0.746,124,1.124,125,0.746,128,0.629,129,0.994,131,2.719,134,2.215,137,2.719,138,3.095,139,2.719,140,2.33,142,0.977,144,2.963,158,0.821,187,1.208,189,1.527,195,1.564,205,2.214,239,2.584,244,2.214,262,3.095,272,1.667,275,1.667,276,1.836,277,0.746,283,0.746,285,0.821,286,2.292,288,1.539,289,0.746,290,0.746,291,0.683,292,0.746,293,0.821,329,1.836,345,3.266,372,1.274,373,1.042,374,2.759,375,2.759,376,1.234,377,1.564,378,1.234,379,2.108,380,1.234,381,1.234,382,1.234,383,3.963,384,3.993,385,2.108,386,2.108,387,2.108,388,2.108,389,2.108,390,1.234,391,1.234,392,1.234,393,3.263,394,1.234,395,1.234,396,3.263,397,1.234,398,1.234,399,1.234,400,3.602,401,2.108,402,2.756,403,1.234,404,2.108,405,2.108,406,1.234,407,1.234,408,1.234,409,3.796,410,2.108,411,1.234,412,1.234,413,1.234,414,1.042,415,1.234,416,1.234,417,1.234,418,1.234,419,2.108,420,1.407,421,1.042,422,2.963,423,1.234,424,1.234,425,1.234,426,1.234,427,1.234,428,3.665,429,2.759,430,3.095,431,1.564,432,1.234,433,1.234,434,2.759,435,2.759,436,1.234,437,2.759,438,1.234,439,1.234,440,2.108,441,1.234,442,1.234,443,1.234,444,2.108,445,1.234]],["title/modules/TaskModule.html",[19,1.278,33,2.034]],["body/modules/TaskModule.html",[0,0.125,3,0.262,4,0.228,5,0.228,11,0.027,15,0.262,16,0.014,17,0.018,18,0.014,19,2.053,21,1.698,22,1.835,23,2.175,24,2.175,25,1.698,26,3.268,27,2.175,30,3.423,32,3.154,33,3.966,34,2.903,35,2.175,36,2.175,38,3.565,39,0.721,40,0.845,43,2.671,44,1.698,61,2.45,165,3.039,372,3.268,420,3.154,421,3.039,446,3.039,447,3.599,448,3.039,449,3.599,450,3.599,451,1.992,452,3.039,453,3.599,454,3.599]],["title/classes/TaskRepository.html",[0,0.117,451,1.863]],["body/classes/TaskRepository.html",[0,0.078,2,0.608,3,0.164,4,0.143,5,0.143,7,0.209,8,0.927,10,0.475,11,0.027,13,0.755,15,0.164,16,0.009,17,0.013,18,0.009,39,0.662,40,0.53,65,1.218,66,2.694,73,2.019,75,1.4,80,1.673,89,1.581,90,1.378,91,1.378,92,1.378,93,1.897,97,1.824,122,1.248,123,1.363,124,1.897,125,1.363,129,1.965,134,1.363,137,1.673,142,1.475,187,2.195,189,1.248,205,2.672,207,2.313,208,1.902,238,1.752,239,1.697,244,2.672,246,4.461,272,2.517,275,2.517,277,1.363,283,1.363,288,1.965,289,1.363,290,1.363,291,1.248,292,1.363,320,1.902,329,1.501,345,2.959,348,2.077,349,2.815,369,1.363,377,1.673,402,1.904,431,1.673,451,1.902,455,1.904,456,3.09,457,3.437,458,1.501,459,1.363,460,3.437,461,2.255,462,3.437,463,2.255,464,2.255,465,2.255,466,1.904,467,2.902,468,1.904,469,2.255,470,2.255,471,2.255,472,2.255,473,1.904,474,2.255,475,2.255,476,2.255,477,1.904,478,1.904,479,1.904,480,2.255,481,2.255,482,1.904,483,2.255,484,2.255,485,1.673,486,2.255,487,2.255,488,2.255,489,2.255,490,2.255]],["title/classes/TaskResponse.html",[0,0.117,288,1.588]],["body/classes/TaskResponse.html",[0,0.132,2,1.026,3,0.277,4,0.241,5,0.241,7,0.353,8,1.344,10,0.731,11,0.026,12,1.525,13,1.037,15,0.277,16,0.015,17,0.019,18,0.015,39,0.434,75,2.265,207,2.434,208,3.077,211,2.834,219,2.106,238,2.834,239,2.265,240,3.925,288,2.351,348,3.359,349,3.359,491,3.214,492,3.806,493,3.806,494,3.806,495,3.806,496,3.806,497,3.806,498,3.806]],["title/injectables/TaskService.html",[171,1.278,420,1.716]],["body/injectables/TaskService.html",[0,0.064,3,0.133,4,0.116,5,0.116,7,0.17,10,0.553,11,0.027,12,1.279,13,0.786,15,0.133,16,0.021,17,0.011,18,0.007,39,0.662,40,0.431,44,0.865,55,1.947,65,1.037,66,3.08,73,2.147,89,1.841,90,1.604,91,1.604,92,1.505,93,2.274,122,1.015,123,1.109,124,2.073,125,1.109,128,1.492,129,1.38,142,1.978,144,2.708,171,1.111,172,1.015,183,1.361,187,1.824,189,2.305,200,2.471,205,2.492,239,2.509,244,2.492,270,1.768,272,2.206,273,2.171,274,2.171,275,2.206,276,2.429,277,1.109,279,2.171,281,2.171,283,1.109,285,1.221,286,2.694,288,0.865,289,1.109,290,1.109,291,1.015,292,1.109,293,1.221,302,1.221,345,2.32,349,1.109,383,2.471,409,2.471,420,1.492,431,2.171,451,2.684,452,1.549,468,1.549,485,1.361,499,1.549,500,1.835,501,1.835,502,1.835,503,1.835,504,1.835,505,1.835,506,1.835,507,1.549,508,1.835,509,1.835,510,1.835,511,1.835,512,3.65,513,1.549,514,1.835,515,1.835,516,1.835,517,4.165,518,4.165,519,2.926,520,2.926,521,2.926,522,2.926,523,2.926,524,3.517,525,1.835,526,1.835]],["title/classes/TaskServiceMock.html",[0,0.117,527,2.498]],["body/classes/TaskServiceMock.html",[0,0.075,2,0.579,3,0.156,4,0.136,5,0.136,7,0.199,8,0.892,10,0.591,11,0.027,12,1.343,13,0.839,15,0.156,16,0.008,17,0.013,18,0.008,39,0.616,65,1.172,73,2.167,75,1.348,89,1.861,90,1.622,91,1.622,92,1.622,93,2.379,97,2.504,129,1.905,142,1.737,187,1.449,205,2.63,207,1.449,208,1.831,211,1.094,219,1.188,238,1.687,239,2.422,244,2.547,270,2.44,272,1.999,273,2.455,274,2.455,275,1.999,276,2.687,277,1.999,279,2.455,281,2.455,283,1.999,285,1.428,286,2.752,288,2.141,289,1.297,290,1.297,291,1.188,292,1.297,293,1.428,302,2.202,348,1.999,349,1.999,458,1.428,459,1.297,507,1.812,527,2.455,528,1.812,529,4.038,530,3.309,531,3.309,532,3.309,533,3.309,534,3.309,535,4.539,536,4.539,537,4.539,538,2.146,539,2.146,540,2.146,541,2.146,542,2.146,543,2.146,544,4.903,545,2.146,546,3.309,547,3.309,548,3.309,549,3.309]],["title/injectables/TypeOrmConfigService.html",[46,2.24,171,1.278]],["body/injectables/TypeOrmConfigService.html",[0,0.133,3,0.278,4,0.242,5,0.242,7,0.354,10,0.57,11,0.026,13,0.809,15,0.278,16,0.015,17,0.019,18,0.015,39,0.636,40,0.897,42,2.541,44,1.802,46,3.325,65,1.77,77,1.556,89,1.45,90,1.263,91,1.263,92,1.263,128,1.947,132,1.947,142,1.353,171,1.897,172,2.114,195,2.834,198,3.225,199,3.225,201,3.225,296,3.225,297,5.311,302,2.541,303,3.225,550,3.225,551,5.907,552,3.819,553,3.819,554,5.569,555,4.997,556,4.997,557,3.819,558,3.819,559,3.819,560,3.819,561,3.819,562,3.819,563,3.819,564,3.819]],["title/classes/UpdateTaskDTO.html",[0,0.117,286,1.716]],["body/classes/UpdateTaskDTO.html",[0,0.176,2,1.053,3,0.284,4,0.247,5,0.247,7,0.362,8,1.367,10,0.642,11,0.026,12,1.399,13,0.912,15,0.284,16,0.015,17,0.019,18,0.015,39,0.578,71,2.293,75,2.293,91,2.093,207,2.464,208,3.115,211,2.869,216,3.401,217,2.896,218,2.16,219,2.16,220,2.896,247,4.28,249,3.296,251,5.03,286,2.584,565,3.296,566,3.903,567,3.903,568,3.903]],["title/classes/User.html",[0,0.117,73,1.114]],["body/classes/User.html",[0,0.111,2,0.865,3,0.233,4,0.203,5,0.203,7,0.298,8,1.198,10,0.699,11,0.026,12,1.467,13,0.993,15,0.233,16,0.012,17,0.017,18,0.012,39,0.507,71,2.496,73,1.47,77,2.076,132,2.599,238,2.599,239,2.076,240,3.661,320,2.459,345,2.945,347,4.304,348,3.08,350,4.304,352,4.304,354,5.175,356,3.752,365,3.752,366,2.709,369,1.939,400,4.304,513,2.709,569,2.709,570,4.304,571,3.208,572,3.208,573,3.208,574,3.208,575,3.208,576,3.208,577,3.208,578,3.208,579,3.208,580,4.443,581,3.208,582,3.208,583,3.208]],["title/classes/UserRepository.html",[0,0.117,160,1.716]],["body/classes/UserRepository.html",[0,0.066,2,0.513,3,0.139,4,0.12,5,0.12,7,0.177,8,0.813,10,0.485,11,0.027,12,1.157,13,0.751,15,0.139,16,0.012,17,0.012,18,0.007,39,0.644,40,0.447,55,1.267,65,1.067,66,2.987,70,2.727,73,1.992,77,2.453,83,1.608,89,1.614,90,1.407,91,1.407,92,1.407,93,2.181,95,2.727,97,2.158,100,1.608,117,1.412,118,1.054,119,1.412,120,1.412,122,1.054,123,1.15,124,1.732,125,1.15,129,2.6,132,2.362,133,1.608,134,1.15,142,1.641,145,1.412,160,1.536,174,2.544,175,2.544,179,2.544,181,2.544,184,1.412,187,2.603,188,1.054,189,2.857,238,0.971,239,0.775,318,1.608,319,1.608,320,1.668,329,2.83,369,1.15,377,2.236,414,1.608,430,2.544,456,2.775,458,1.267,459,1.15,466,1.608,467,2.544,473,1.608,477,1.608,478,1.608,479,1.608,482,1.608,485,1.412,524,1.608,570,3.591,584,1.608,585,3.74,586,3.74,587,3.013,588,1.904,589,1.904,590,1.904,591,1.904,592,1.904,593,1.904,594,1.904,595,3.013,596,3.013,597,1.904,598,1.608,599,1.904,600,1.904,601,1.904,602,1.904,603,1.904,604,1.904,605,1.904,606,1.904,607,1.904,608,1.904,609,1.904,610,1.904,611,3.74,612,1.904,613,3.74,614,1.904,615,1.904,616,1.904,617,3.013,618,1.904,619,1.904,620,3.013,621,1.904,622,3.013,623,1.904,624,1.904,625,1.904]],["title/coverage.html",[626,3.407]],["body/coverage.html",[0,0.225,1,1.613,5,0.169,6,2.253,10,0.305,11,0.026,16,0.01,17,0.015,18,0.01,25,1.259,46,1.776,49,1.776,59,2.347,60,1.613,62,2.253,70,1.477,73,0.883,95,1.477,97,1.168,115,1.477,118,1.477,124,1.087,153,1.613,160,1.36,162,1.776,171,2.044,173,2.253,188,1.477,192,2.347,194,2.253,205,1.259,206,2.253,221,2.892,231,1.776,237,2.253,244,1.259,245,2.253,252,1.776,253,2.253,261,1.776,268,2.253,270,1.613,271,2.253,286,1.36,288,1.259,294,2.253,307,2.253,308,2.253,337,2.253,341,2.253,345,1.36,346,2.253,372,1.613,373,2.253,420,1.36,422,1.98,451,1.477,455,2.253,491,2.253,499,2.253,527,1.98,528,2.253,550,2.253,565,2.253,569,2.253,584,2.253,626,1.98,627,2.668,628,2.668,629,2.668,630,6.858,631,5.807,632,5.385,633,3.416,634,2.668,635,5.807,636,5.385,637,2.253,638,2.253,639,2.253,640,5.063,641,3.897,642,4.604,643,2.668,644,2.668,645,3.897,646,2.253,647,2.253,648,2.668,649,2.668]],["title/dependencies.html",[22,2.064,650,2.812]],["body/dependencies.html",[0,0.176,11,0.027,16,0.015,17,0.019,18,0.015,22,1.99,40,0.917,42,2.597,44,1.841,114,2.597,156,2.597,158,2.597,169,3.372,218,2.16,317,4.28,369,2.359,598,3.296,651,5.628,652,3.903,653,3.903,654,5.628,655,3.903,656,5.068,657,3.903,658,3.903,659,3.903,660,5.068,661,3.903,662,3.903,663,3.903,664,3.903,665,3.903,666,3.903,667,3.903,668,3.903,669,3.903,670,3.903,671,3.903,672,3.903,673,3.903,674,3.903,675,3.903,676,3.903,677,3.903,678,3.903,679,3.903,680,3.903,681,3.903]],["title/miscellaneous/enumerations.html",[682,1.556,683,3.418]],["body/miscellaneous/enumerations.html",[7,0.367,11,0.026,16,0.015,17,0.02,18,0.015,25,2.414,60,3.092,122,2.832,134,3.092,160,2.609,211,2.609,372,3.092,420,2.609,451,2.832,459,4.123,682,2.192,683,3.345,684,3.962,685,5.117,686,3.962,687,3.962,688,3.962,689,3.962,690,5.117,691,5.117,692,5.117,693,5.117,694,3.962,695,4.321,696,5.117,697,5.117]],["title/miscellaneous/functions.html",[682,1.556,698,3.418]],["body/miscellaneous/functions.html",[7,0.473,11,0.024,16,0.02,17,0.023,18,0.02,25,2.993,92,1.688,93,2.079,633,3.786,682,2.824,698,4.309,699,4.309]],["title/index.html",[7,0.261,700,2.812,701,2.812]],["body/index.html",[4,0.23,11,0.026,16,0.014,17,0.019,18,0.014,75,1.481,86,2.197,456,2.698,626,2.698,695,3.071,702,3.636,703,3.636,704,4.837,705,3.636,706,3.636,707,3.636,708,3.636,709,3.636,710,3.636,711,3.636,712,3.636,713,5.436,714,3.636,715,3.636,716,3.636,717,6.331,718,3.636,719,3.636,720,3.636,721,6.204,722,3.636,723,3.636,724,4.837,725,3.636,726,3.636,727,3.636,728,3.636,729,4.837,730,4.837,731,3.636,732,3.636,733,3.636,734,4.837,735,4.837,736,3.636,737,3.636,738,3.636,739,3.636,740,3.071,741,3.636,742,3.636,743,3.636,744,3.636,745,3.636,746,3.636,747,3.636,748,3.636,749,3.636,750,3.636,751,3.636,752,3.636,753,3.636,754,3.636,755,3.636,756,3.636,757,3.636,758,3.636]],["title/modules.html",[21,2.166]],["body/modules.html",[11,0.022,16,0.018,17,0.022,18,0.018,20,3.182,21,2.255,30,2.646,31,2.889,32,2.438,33,2.889,740,5.409,759,6.406,760,6.406,761,6.554,762,4.782,763,4.782]],["title/overview.html",[764,3.878]],["body/overview.html",[2,0.964,11,0.026,16,0.014,17,0.018,18,0.014,19,1.357,20,4.361,21,1.686,22,1.823,23,2.16,24,2.16,25,1.686,26,2.16,27,2.16,28,3.019,29,3.019,30,3.59,31,3.257,32,3.266,33,3.921,34,2.89,35,2.16,36,2.16,61,1.823,115,2.983,124,2.568,149,3.019,151,3.019,152,3.019,153,3.478,172,1.979,193,2.379,332,3.019,333,3.019,334,3.019,420,2.748,446,3.019,448,3.019,764,3.019,765,4.783,766,4.783,767,3.575]],["title/miscellaneous/variables.html",[682,1.556,768,3.418]],["body/miscellaneous/variables.html",[7,0.37,10,0.455,11,0.026,16,0.015,17,0.02,18,0.015,55,2.656,97,1.748,139,2.961,142,1.414,187,1.748,221,2.961,231,3.421,232,3.37,233,3.37,234,3.37,235,3.37,422,3.815,458,4.137,459,3.757,633,2.961,637,4.342,638,4.342,639,3.37,646,3.37,647,4.342,682,2.209,699,4.342,768,3.37,769,3.991,770,3.991,771,3.991,772,3.991,773,3.991,774,3.991,775,3.991,776,3.991,777,3.991,778,3.991,779,3.991,780,3.991,781,5.142]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"classes/AccessToken.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Configuration.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HealthResponse.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"interfaces/JwtPayload.html":{},"classes/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["0.2.25",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["0.4.2",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":640,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":631,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":632,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":641,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":518,"title":{},"body":{"injectables/TaskService.html":{}}}],["1.0.4",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":536,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["15",{"_index":767,"title":{},"body":{"overview.html":{}}}],["2000",{"_index":537,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["23505",{"_index":610,"title":{},"body":{"classes/UserRepository.html":{}}}],["3",{"_index":766,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["4.5.12",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":765,"title":{},"body":{"overview.html":{}}}],["6.6.2",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["7.4.2",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["8.3.0",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["__dirname}/../**/*.entity.{js,ts",{"_index":563,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["accesstoken",{"_index":1,"title":{"classes/AccessToken.html":{}},"body":{"classes/AccessToken.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["accesstoken})@apinotfoundresponse({description",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["active",{"_index":405,"title":{},"body":{"controllers/TaskController.html":{}}}],["affected",{"_index":522,"title":{},"body":{"injectables/TaskService.html":{}}}],["already",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserRepository.html":{}}}],["amazing",{"_index":741,"title":{},"body":{"index.html":{}}}],["angular",{"_index":712,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":419,"title":{},"body":{"controllers/TaskController.html":{}}}],["apiconflictresponse",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["apicreatedresponse",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["apiinternalservererrorresponse",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["apinotfoundresponse",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["apiokresponse",{"_index":262,"title":{},"body":{"controllers/HealthController.html":{},"controllers/TaskController.html":{}}}],["apioperation",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TaskController.html":{}}}],["apioperation({summary",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TaskController.html":{}}}],["apitags",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TaskController.html":{}}}],["apitags('auth",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('health",{"_index":264,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags('task",{"_index":424,"title":{},"body":{"controllers/TaskController.html":{}}}],["apiunauthorizedresponse",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["app",{"_index":719,"title":{},"body":{"index.html":{}}}],["app_name",{"_index":637,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["app_version",{"_index":638,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["applications",{"_index":709,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":20,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/UserRepository.html":{}}}],["auth",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":453,"title":{},"body":{"modules/TaskModule.html":{}}}],["auth/decorators/getuser.decorator",{"_index":423,"title":{},"body":{"controllers/TaskController.html":{}}}],["auth/models/user.entity",{"_index":291,"title":{},"body":{"interfaces/ITaskService.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["authcontroller",{"_index":60,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["authguard",{"_index":418,"title":{},"body":{"controllers/TaskController.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":751,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":115,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":763,"title":{},"body":{"modules.html":{}}}],["await",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/UserRepository.html":{}}}],["backers",{"_index":742,"title":{},"body":{"index.html":{}}}],["baseentity",{"_index":347,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["bcrypt",{"_index":598,"title":{},"body":{"classes/UserRepository.html":{},"dependencies.html":{}}}],["bearertoken",{"_index":9,"title":{},"body":{"classes/AccessToken.html":{},"injectables/AuthService.html":{}}}],["body",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["body'})@apicreatedresponse({description",{"_index":376,"title":{},"body":{"controllers/TaskController.html":{}}}],["body(validationpipe",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":202,"title":{},"body":{"interfaces/Configuration.html":{}}}],["bootstrap",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoggerModule.html":{},"modules/TaskModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":761,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":759,"title":{},"body":{"modules.html":{}}}],["building",{"_index":705,"title":{},"body":{"index.html":{}}}],["buildtaskresponse",{"_index":457,"title":{},"body":{"classes/TaskRepository.html":{}}}],["buildtaskresponse(task",{"_index":462,"title":{},"body":{"classes/TaskRepository.html":{}}}],["canactivate",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":477,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["check",{"_index":256,"title":{},"body":{"controllers/HealthController.html":{}}}],["checkhealth",{"_index":255,"title":{},"body":{"controllers/HealthController.html":{}}}],["class",{"_index":0,"title":{"classes/AccessToken.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"classes/HealthResponse.html":{},"classes/JwtStrategy.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"classes/TaskServiceMock.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{}},"body":{"classes/AccessToken.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HealthResponse.html":{},"injectables/JwtConfigService.html":{},"classes/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AccessToken.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"classes/HealthResponse.html":{},"classes/JwtStrategy.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"classes/TaskServiceMock.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["closed",{"_index":696,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cluster_appmodule",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":332,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":333,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":334,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_taskmodule",{"_index":446,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_imports",{"_index":447,"title":{},"body":{"modules/TaskModule.html":{}}}],["cluster_taskmodule_providers",{"_index":448,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["column",{"_index":354,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["column({name",{"_index":363,"title":{},"body":{"classes/Task.html":{}}}],["comparepasswordresult",{"_index":617,"title":{},"body":{"classes/UserRepository.html":{}}}],["complexity",{"_index":224,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["config/configuration",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{}}}],["config/typeorm.config",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":297,"title":{},"body":{"injectables/JwtConfigService.html":{},"injectables/TypeOrmConfigService.html":{}}}],["configuration",{"_index":49,"title":{"interfaces/Configuration.html":{}},"body":{"modules/AppModule.html":{},"interfaces/Configuration.html":{},"coverage.html":{}}}],["conflictexception",{"_index":599,"title":{},"body":{"classes/UserRepository.html":{}}}],["conflictexception(errormessage",{"_index":614,"title":{},"body":{"classes/UserRepository.html":{}}}],["const",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/JwtStrategy.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtConfigService.html":{},"classes/JwtStrategy.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/TypeOrmConfigService.html":{}}}],["constructor(@injectrepository(user",{"_index":322,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["constructor(configservice",{"_index":296,"title":{},"body":{"injectables/JwtConfigService.html":{},"injectables/TypeOrmConfigService.html":{}}}],["constructor(private",{"_index":303,"title":{},"body":{"injectables/JwtConfigService.html":{},"injectables/TypeOrmConfigService.html":{}}}],["constructor(taskrepository",{"_index":500,"title":{},"body":{"injectables/TaskService.html":{}}}],["constructor(userrepository",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{}}}],["controller",{"_index":59,"title":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TaskController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TaskController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('health",{"_index":265,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('task",{"_index":425,"title":{},"body":{"controllers/TaskController.html":{}}}],["controllers",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["coverage",{"_index":626,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["created",{"_index":377,"title":{},"body":{"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["createdatecolumn",{"_index":350,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["createjwtoptions",{"_index":295,"title":{},"body":{"injectables/JwtConfigService.html":{}}}],["createparamdecorator",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtask",{"_index":272,"title":{},"body":{"interfaces/ITaskService.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["createtask(user",{"_index":277,"title":{},"body":{"interfaces/ITaskService.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["createtaskdto",{"_index":205,"title":{"classes/CreateTaskDTO.html":{}},"body":{"classes/CreateTaskDTO.html":{},"interfaces/ITaskService.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"coverage.html":{}}}],["createtypeormoptions",{"_index":551,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["createuser",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["createuser(createuserdto",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["createuser.dto",{"_index":344,"title":{},"body":{"classes/SignInUserDTO.html":{}}}],["createuserdto",{"_index":95,"title":{"classes/CreateUserDTO.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["createuserresponse",{"_index":118,"title":{"classes/CreateUserResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserResponse.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["createuserresponse})@apiconflictresponse({description",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["ctx",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":233,"title":{},"body":{"classes/CreateUserDTO.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":195,"title":{},"body":{"interfaces/Configuration.html":{},"controllers/TaskController.html":{},"injectables/TypeOrmConfigService.html":{}}}],["date",{"_index":240,"title":{},"body":{"classes/CreateUserResponse.html":{},"classes/Task.html":{},"classes/TaskResponse.html":{},"classes/User.html":{}}}],["date('10",{"_index":535,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["datetimecreated",{"_index":238,"title":{},"body":{"classes/CreateUserResponse.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"classes/TaskServiceMock.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["datetimemodified",{"_index":348,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"classes/TaskServiceMock.html":{},"classes/User.html":{}}}],["db",{"_index":481,"title":{},"body":{"classes/TaskRepository.html":{}}}],["debug",{"_index":692,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["declarations",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoggerModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["decorators",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterTaskDTO.html":{},"controllers/HealthController.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{}}}],["default",{"_index":458,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TaskServiceMock.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":13,"title":{},"body":{"classes/AccessToken.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"controllers/HealthController.html":{},"classes/HealthResponse.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"classes/JwtStrategy.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["delete",{"_index":383,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["delete('/:id",{"_index":439,"title":{},"body":{"controllers/TaskController.html":{}}}],["deleted",{"_index":386,"title":{},"body":{"controllers/TaskController.html":{}}}],["deletetask",{"_index":374,"title":{},"body":{"controllers/TaskController.html":{}}}],["deletetask(user",{"_index":382,"title":{},"body":{"controllers/TaskController.html":{}}}],["deletetaskbyid",{"_index":273,"title":{},"body":{"interfaces/ITaskService.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["deletetaskbyid(user",{"_index":279,"title":{},"body":{"interfaces/ITaskService.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["dependencies",{"_index":22,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoggerModule.html":{},"modules/TaskModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTaskDTO.html":{},"controllers/HealthController.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"classes/TaskServiceMock.html":{},"classes/UpdateTaskDTO.html":{},"index.html":{}}}],["development",{"_index":720,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["dto/accesstoken.dto",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/createtask.dto",{"_index":292,"title":{},"body":{"interfaces/ITaskService.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["dto/createuser.dto",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["dto/createuserresponse.dto",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["dto/filtertask.dto",{"_index":290,"title":{},"body":{"interfaces/ITaskService.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["dto/healthresponse.dto",{"_index":263,"title":{},"body":{"controllers/HealthController.html":{}}}],["dto/signinuser.dto",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["dto/taskresponse.dto",{"_index":289,"title":{},"body":{"interfaces/ITaskService.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["dto/updatetask.dto",{"_index":293,"title":{},"body":{"interfaces/ITaskService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["e2e",{"_index":731,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":706,"title":{},"body":{"index.html":{}}}],["entities",{"_index":562,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["entity",{"_index":365,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["entityrepository",{"_index":466,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(task",{"_index":469,"title":{},"body":{"classes/TaskRepository.html":{}}}],["entityrepository(user",{"_index":600,"title":{},"body":{"classes/UserRepository.html":{}}}],["enumerations",{"_index":683,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/taskstatus.enum",{"_index":219,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/FilterTaskDTO.html":{},"classes/Task.html":{},"classes/TaskResponse.html":{},"classes/TaskServiceMock.html":{},"classes/UpdateTaskDTO.html":{}}}],["error",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"classes/UserRepository.html":{},"miscellaneous/enumerations.html":{}}}],["error'})@delete('/:id",{"_index":390,"title":{},"body":{"controllers/TaskController.html":{}}}],["error'})@get('/:id",{"_index":398,"title":{},"body":{"controllers/TaskController.html":{}}}],["error'})@get()@usepipes(validationpipe",{"_index":407,"title":{},"body":{"controllers/TaskController.html":{}}}],["error'})@patch('/:id')@usepipes(validationpipe",{"_index":411,"title":{},"body":{"controllers/TaskController.html":{}}}],["error'})@post('/signin",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["error'})@post('/signup",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["error'})@post()@usepipes(validationpipe",{"_index":380,"title":{},"body":{"controllers/TaskController.html":{}}}],["error.code",{"_index":609,"title":{},"body":{"classes/UserRepository.html":{}}}],["error.stack",{"_index":482,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["errormessage",{"_index":611,"title":{},"body":{"classes/UserRepository.html":{}}}],["executioncontext",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exist",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserRepository.html":{}}}],["exist'})@apiinternalservererrorresponse({description",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["existing",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["exists",{"_index":612,"title":{},"body":{"classes/UserRepository.html":{}}}],["expiresin",{"_index":204,"title":{},"body":{"interfaces/Configuration.html":{},"injectables/JwtConfigService.html":{}}}],["export",{"_index":15,"title":{},"body":{"classes/AccessToken.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Configuration.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HealthResponse.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"interfaces/JwtPayload.html":{},"classes/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["exports",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoggerModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["express",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":320,"title":{},"body":{"classes/JwtStrategy.html":{},"injectables/LoggerService.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":316,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":325,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["failed",{"_index":479,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["false",{"_index":524,"title":{},"body":{"injectables/TaskService.html":{},"classes/UserRepository.html":{}}}],["fetches",{"_index":393,"title":{},"body":{"controllers/TaskController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AccessToken.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Configuration.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HealthResponse.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"interfaces/JwtPayload.html":{},"classes/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["filter",{"_index":401,"title":{},"body":{"controllers/TaskController.html":{}}}],["filtertaskdto",{"_index":244,"title":{"classes/FilterTaskDTO.html":{}},"body":{"classes/FilterTaskDTO.html":{},"interfaces/ITaskService.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"coverage.html":{}}}],["found",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["found'})@apiinternalservererrorresponse({description",{"_index":389,"title":{},"body":{"controllers/TaskController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["framework",{"_index":704,"title":{},"body":{"index.html":{}}}],["function",{"_index":634,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":698,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gensalt",{"_index":596,"title":{},"body":{"classes/UserRepository.html":{}}}],["get('/:id",{"_index":433,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettask",{"_index":375,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettask(user",{"_index":392,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettaskbyid",{"_index":274,"title":{},"body":{"interfaces/ITaskService.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["gettaskbyid(user",{"_index":281,"title":{},"body":{"interfaces/ITaskService.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["gettasks",{"_index":275,"title":{},"body":{"interfaces/ITaskService.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["gettasks(user",{"_index":283,"title":{},"body":{"interfaces/ITaskService.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["getting",{"_index":700,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":422,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["given",{"_index":384,"title":{},"body":{"controllers/TaskController.html":{}}}],["graph",{"_index":762,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":737,"title":{},"body":{"index.html":{}}}],["hash",{"_index":597,"title":{},"body":{"classes/UserRepository.html":{}}}],["hash(inputpassword",{"_index":623,"title":{},"body":{"classes/UserRepository.html":{}}}],["hash(password",{"_index":621,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashedpassword",{"_index":620,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashpassword",{"_index":585,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashpassword(password",{"_index":590,"title":{},"body":{"classes/UserRepository.html":{}}}],["health",{"_index":254,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":267,"title":{},"body":{"modules/HealthModule.html":{}}}],["healthcontroller",{"_index":252,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":31,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthresponse",{"_index":261,"title":{"classes/HealthResponse.html":{}},"body":{"controllers/HealthController.html":{},"classes/HealthResponse.html":{},"coverage.html":{}}}],["healthresponse})@get",{"_index":259,"title":{},"body":{"controllers/HealthController.html":{}}}],["heavily",{"_index":710,"title":{},"body":{"index.html":{}}}],["here",{"_index":748,"title":{},"body":{"index.html":{}}}],["host",{"_index":198,"title":{},"body":{"interfaces/Configuration.html":{},"injectables/TypeOrmConfigService.html":{}}}],["https://gist.github.com/arielweinberger/18a29bfa17072444d45adaeeb8e92ddc",{"_index":230,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["https://nestjs.com",{"_index":755,"title":{},"body":{"index.html":{}}}],["id",{"_index":239,"title":{},"body":{"classes/CreateUserResponse.html":{},"interfaces/ITaskService.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["id'})@apinotfoundresponse({description",{"_index":394,"title":{},"body":{"controllers/TaskController.html":{}}}],["id'})@apiokresponse({description",{"_index":385,"title":{},"body":{"controllers/TaskController.html":{}}}],["identifier",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":302,"title":{},"body":{"injectables/JwtConfigService.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{}}}],["import",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Configuration.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterTaskDTO.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"classes/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{}}}],["in_progress",{"_index":697,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AccessToken.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Configuration.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"controllers/HealthController.html":{},"classes/HealthResponse.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"interfaces/JwtPayload.html":{},"classes/JwtStrategy.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AccessToken.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Configuration.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HealthResponse.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"interfaces/JwtPayload.html":{},"classes/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["injectable",{"_index":171,"title":{"injectables/AuthService.html":{},"injectables/JwtConfigService.html":{},"injectables/LoggerService.html":{},"injectables/TaskService.html":{},"injectables/TypeOrmConfigService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtConfigService.html":{},"injectables/LoggerService.html":{},"injectables/TaskService.html":{},"injectables/TypeOrmConfigService.html":{},"coverage.html":{}}}],["injectables",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtConfigService.html":{},"injectables/LoggerService.html":{},"injectables/TaskService.html":{},"injectables/TypeOrmConfigService.html":{},"overview.html":{}}}],["injectrepository",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"injectables/TaskService.html":{}}}],["injectrepository(task",{"_index":508,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectrepository(user",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["inputpassword",{"_index":595,"title":{},"body":{"classes/UserRepository.html":{}}}],["inputpasswordhash",{"_index":622,"title":{},"body":{"classes/UserRepository.html":{}}}],["inspired",{"_index":711,"title":{},"body":{"index.html":{}}}],["installation",{"_index":716,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":718,"title":{},"body":{"index.html":{}}}],["interface",{"_index":192,"title":{"interfaces/Configuration.html":{},"interfaces/ITaskService.html":{},"interfaces/JwtPayload.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/ITaskService.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":193,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/ITaskService.html":{},"interfaces/JwtPayload.html":{},"overview.html":{}}}],["interfaces/jwtpayload.interface",{"_index":319,"title":{},"body":{"classes/JwtStrategy.html":{},"classes/UserRepository.html":{}}}],["interfaces/taskservice.interface",{"_index":507,"title":{},"body":{"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["internal",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["internalservererrorexception",{"_index":467,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["isglobal",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":217,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/FilterTaskDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["isin([...object.values(taskstatus",{"_index":220,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/FilterTaskDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["isnotempty",{"_index":215,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/SignInUserDTO.html":{}}}],["isnotempty()@isin(undefined",{"_index":212,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["isnotempty()@isstring",{"_index":209,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["isoptional",{"_index":251,"title":{},"body":{"classes/FilterTaskDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["isoptional()@isin(undefined",{"_index":249,"title":{},"body":{"classes/FilterTaskDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["isoptional()@isstring",{"_index":247,"title":{},"body":{"classes/FilterTaskDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["isstring",{"_index":216,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterTaskDTO.html":{},"classes/SignInUserDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["isstring()@isnotempty",{"_index":227,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/SignInUserDTO.html":{}}}],["isstring()@isnotempty()@matches(passwordregex",{"_index":222,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/SignInUserDTO.html":{}}}],["itaskservice",{"_index":270,"title":{"interfaces/ITaskService.html":{}},"body":{"interfaces/ITaskService.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"coverage.html":{}}}],["join",{"_index":744,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":368,"title":{},"body":{"classes/Task.html":{}}}],["json.stringify",{"_index":431,"title":{},"body":{"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["json.stringify(createuserdto",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["json.stringify(signinuserdto",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["json.stringify(updatetaskdto",{"_index":443,"title":{},"body":{"controllers/TaskController.html":{}}}],["jwt",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Configuration.html":{},"classes/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtconfigservice",{"_index":162,"title":{"injectables/JwtConfigService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtConfigService.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":324,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["jwtmodule",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmoduleoptions",{"_index":300,"title":{},"body":{"injectables/JwtConfigService.html":{}}}],["jwtoptionsfactory",{"_index":301,"title":{},"body":{"injectables/JwtConfigService.html":{}}}],["jwtpayload",{"_index":188,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"classes/JwtStrategy.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["jwtservice",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":153,"title":{"classes/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"classes/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":752,"title":{},"body":{"index.html":{}}}],["legend",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoggerModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["license",{"_index":758,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":735,"title":{},"body":{"index.html":{}}}],["list",{"_index":404,"title":{},"body":{"controllers/TaskController.html":{}}}],["literal",{"_index":196,"title":{},"body":{"interfaces/Configuration.html":{}}}],["load",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["log",{"_index":690,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["logger",{"_index":338,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger.service",{"_index":336,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logger/enums/loggercontext.enum",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/UserRepository.html":{}}}],["logger/logger.module",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"modules/TaskModule.html":{}}}],["logger/logger.service",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/UserRepository.html":{}}}],["loggercontext",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/UserRepository.html":{},"miscellaneous/enumerations.html":{}}}],["loggermodule",{"_index":32,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoggerModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["loggerservice",{"_index":124,"title":{"injectables/LoggerService.html":{}},"body":{"controllers/AuthController.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/UserRepository.html":{},"coverage.html":{},"overview.html":{}}}],["loggerservice(loggercontext.taskrepository",{"_index":460,"title":{},"body":{"classes/TaskRepository.html":{}}}],["loggerservice(loggercontext.userrepository",{"_index":587,"title":{},"body":{"classes/UserRepository.html":{}}}],["loglevel",{"_index":197,"title":{},"body":{"interfaces/Configuration.html":{}}}],["loglevels",{"_index":685,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["manytoone",{"_index":367,"title":{},"body":{"classes/Task.html":{}}}],["manytoone((type",{"_index":370,"title":{},"body":{"classes/Task.html":{}}}],["manytoone(undefined",{"_index":360,"title":{},"body":{"classes/Task.html":{}}}],["match",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDTO.html":{},"classes/UserRepository.html":{}}}],["match'})@apiinternalservererrorresponse({description",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["matches",{"_index":229,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/SignInUserDTO.html":{}}}],["matches(passwordregex",{"_index":236,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/SignInUserDTO.html":{}}}],["matching",{"_index":17,"title":{},"body":{"classes/AccessToken.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Configuration.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HealthResponse.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"interfaces/JwtPayload.html":{},"classes/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":223,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/SignInUserDTO.html":{}}}],["metadata",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"classes/JwtStrategy.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UserRepository.html":{}}}],["miscellaneous",{"_index":682,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":734,"title":{},"body":{"index.html":{}}}],["mockdescription",{"_index":533,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["mockguard",{"_index":647,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockid",{"_index":530,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["mockresponse",{"_index":546,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["mocktaskresponse",{"_index":529,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["mocktitle",{"_index":531,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["mockuserid",{"_index":534,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["mode",{"_index":724,"title":{},"body":{"index.html":{}}}],["models/task.entity",{"_index":468,"title":{},"body":{"classes/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["models/user.entity",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"classes/UserRepository.html":{}}}],["module",{"_index":19,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["modules",{"_index":21,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/health/health.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/logger/logger.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/task/task.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":747,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":753,"title":{},"body":{"index.html":{}}}],["name",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Configuration.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"classes/JwtStrategy.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UserRepository.html":{}}}],["nest",{"_index":713,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":757,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Configuration.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtConfigService.html":{},"classes/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtConfigService.html":{},"injectables/TypeOrmConfigService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtConfigService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{},"classes/JwtStrategy.html":{},"controllers/TaskController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TaskController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"injectables/TypeOrmConfigService.html":{},"dependencies.html":{}}}],["new",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDTO.html":{},"classes/JwtStrategy.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"classes/TaskServiceMock.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":703,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":414,"title":{},"body":{"controllers/TaskController.html":{},"classes/UserRepository.html":{}}}],["notfoundexception(`task",{"_index":437,"title":{},"body":{"controllers/TaskController.html":{}}}],["notfoundexception(errormessage",{"_index":616,"title":{},"body":{"classes/UserRepository.html":{}}}],["npm",{"_index":717,"title":{},"body":{"index.html":{}}}],["number",{"_index":200,"title":{},"body":{"interfaces/Configuration.html":{},"injectables/TaskService.html":{}}}],["ok",{"_index":258,"title":{},"body":{"controllers/HealthController.html":{}}}],["onetomany",{"_index":580,"title":{},"body":{"classes/User.html":{}}}],["onetomany(undefined",{"_index":576,"title":{},"body":{"classes/User.html":{}}}],["open",{"_index":695,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["operation",{"_index":523,"title":{},"body":{"injectables/TaskService.html":{}}}],["optional",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/FilterTaskDTO.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"classes/JwtStrategy.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateTaskDTO.html":{},"classes/UserRepository.html":{}}}],["out",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoggerModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["overview",{"_index":764,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":650,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":413,"title":{},"body":{"controllers/TaskController.html":{}}}],["param('id",{"_index":434,"title":{},"body":{"controllers/TaskController.html":{}}}],["parameters",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"classes/JwtStrategy.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UserRepository.html":{}}}],["parameters'})@apiokresponse({description",{"_index":403,"title":{},"body":{"controllers/TaskController.html":{}}}],["partialtask",{"_index":470,"title":{},"body":{"classes/TaskRepository.html":{}}}],["partialtask.user",{"_index":472,"title":{},"body":{"classes/TaskRepository.html":{}}}],["partialuser",{"_index":602,"title":{},"body":{"classes/UserRepository.html":{}}}],["partialuser.save",{"_index":606,"title":{},"body":{"classes/UserRepository.html":{}}}],["passport",{"_index":317,"title":{},"body":{"classes/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":314,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":321,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["password",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Configuration.html":{},"classes/CreateUserDTO.html":{},"classes/SignInUserDTO.html":{},"injectables/TypeOrmConfigService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["password'})@apicreatedresponse({description",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["passwordregex",{"_index":231,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/SignInUserDTO.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["passwords",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserRepository.html":{}}}],["patch",{"_index":415,"title":{},"body":{"controllers/TaskController.html":{}}}],["patch('/:id",{"_index":442,"title":{},"body":{"controllers/TaskController.html":{}}}],["payload",{"_index":313,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["pg",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":745,"title":{},"body":{"index.html":{}}}],["port",{"_index":199,"title":{},"body":{"interfaces/Configuration.html":{},"injectables/TypeOrmConfigService.html":{}}}],["post",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["post('/signin",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":556,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["prefix",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TaskController.html":{}}}],["primarygeneratedcolumn",{"_index":366,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":356,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["private",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"classes/UserRepository.html":{}}}],["process.env.jwt_secret",{"_index":327,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["process.env.npm_package_name",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.npm_package_version",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":726,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":702,"title":{},"body":{"index.html":{}}}],["project",{"_index":736,"title":{},"body":{"index.html":{}}}],["promise",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITaskService.html":{},"classes/JwtStrategy.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"classes/UserRepository.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":544,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/AccessToken.html":{},"interfaces/Configuration.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"classes/HealthResponse.html":{},"interfaces/JwtPayload.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"classes/TaskServiceMock.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["providers",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoggerModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["query",{"_index":402,"title":{},"body":{"controllers/TaskController.html":{},"classes/TaskRepository.html":{}}}],["query.andwhere",{"_index":487,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.andwhere('task.status",{"_index":486,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.getmany",{"_index":490,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.where('task.userid",{"_index":484,"title":{},"body":{"classes/TaskRepository.html":{}}}],["read",{"_index":746,"title":{},"body":{"index.html":{}}}],["received",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["reflect",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["regexp",{"_index":232,"title":{},"body":{"classes/CreateUserDTO.html":{},"miscellaneous/variables.html":{}}}],["repository",{"_index":456,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["repository/task.repository",{"_index":452,"title":{},"body":{"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["repository/user.respository",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{}}}],["request",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requirements",{"_index":225,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["reset",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoggerModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["resolve([this.mocktaskresponse",{"_index":545,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["resolve(mockresponse",{"_index":548,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["resolve(true",{"_index":549,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["response",{"_index":435,"title":{},"body":{"controllers/TaskController.html":{}}}],["result",{"_index":16,"title":{},"body":{"classes/AccessToken.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Configuration.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HealthResponse.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"interfaces/JwtPayload.html":{},"classes/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.affected",{"_index":517,"title":{},"body":{"injectables/TaskService.html":{}}}],["result.hashedpassword",{"_index":604,"title":{},"body":{"classes/UserRepository.html":{}}}],["result.salt",{"_index":605,"title":{},"body":{"classes/UserRepository.html":{}}}],["results",{"_index":18,"title":{},"body":{"classes/AccessToken.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Configuration.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HealthResponse.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"interfaces/JwtPayload.html":{},"classes/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":396,"title":{},"body":{"controllers/TaskController.html":{}}}],["return",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtConfigService.html":{},"classes/JwtStrategy.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"classes/JwtStrategy.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UserRepository.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["rows",{"_index":521,"title":{},"body":{"injectables/TaskService.html":{}}}],["run",{"_index":721,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":570,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["save",{"_index":480,"title":{},"body":{"classes/TaskRepository.html":{}}}],["scalable",{"_index":707,"title":{},"body":{"index.html":{}}}],["scope",{"_index":339,"title":{},"body":{"injectables/LoggerService.html":{}}}],["scope.transient",{"_index":340,"title":{},"body":{"injectables/LoggerService.html":{}}}],["searchterm",{"_index":246,"title":{},"body":{"classes/FilterTaskDTO.html":{},"classes/TaskRepository.html":{}}}],["secret",{"_index":203,"title":{},"body":{"interfaces/Configuration.html":{},"injectables/JwtConfigService.html":{}}}],["secretorkey",{"_index":326,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["server",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Configuration.html":{},"controllers/HealthController.html":{},"controllers/TaskController.html":{},"index.html":{}}}],["server'})@apiokresponse({description",{"_index":257,"title":{},"body":{"controllers/HealthController.html":{}}}],["side",{"_index":708,"title":{},"body":{"index.html":{}}}],["sign",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["signed",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signinuserdto",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinuser",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signinuser(signinuserdto",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signinuserdto",{"_index":70,"title":{"classes/SignInUserDTO.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInUserDTO.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["signoptions",{"_index":305,"title":{},"body":{"injectables/JwtConfigService.html":{}}}],["signup",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(createuserdto",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AccessToken.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Configuration.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HealthResponse.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"interfaces/JwtPayload.html":{},"classes/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["sponsors",{"_index":739,"title":{},"body":{"index.html":{}}}],["src/.../authguard.mock.ts",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../createuser.dto.ts",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../getuser.decorator.ts",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../loggercontext.enum.ts",{"_index":684,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../loggerlevels.enum.ts",{"_index":686,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":699,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../taskstatus.enum.ts",{"_index":687,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["src/config/jwt.config.ts",{"_index":294,"title":{},"body":{"injectables/JwtConfigService.html":{},"coverage.html":{}}}],["src/config/jwt.config.ts:6",{"_index":298,"title":{},"body":{"injectables/JwtConfigService.html":{}}}],["src/config/jwt.config.ts:9",{"_index":299,"title":{},"body":{"injectables/JwtConfigService.html":{}}}],["src/config/typeorm.config.ts",{"_index":550,"title":{},"body":{"injectables/TypeOrmConfigService.html":{},"coverage.html":{}}}],["src/config/typeorm.config.ts:6",{"_index":552,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["src/config/typeorm.config.ts:9",{"_index":553,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["src/interfaces/configuration.interface.ts",{"_index":194,"title":{},"body":{"interfaces/Configuration.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":633,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:45",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:73",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:12",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:19",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:23",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/decorators/getuser.decorator.ts",{"_index":639,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dto/accesstoken.dto.ts",{"_index":6,"title":{},"body":{"classes/AccessToken.html":{},"coverage.html":{}}}],["src/modules/auth/dto/accesstoken.dto.ts:2",{"_index":14,"title":{},"body":{"classes/AccessToken.html":{}}}],["src/modules/auth/dto/createuser.dto.ts",{"_index":221,"title":{},"body":{"classes/CreateUserDTO.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dto/createuser.dto.ts:11",{"_index":228,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/modules/auth/dto/createuser.dto.ts:18",{"_index":226,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/modules/auth/dto/createuserresponse.dto.ts",{"_index":237,"title":{},"body":{"classes/CreateUserResponse.html":{},"coverage.html":{}}}],["src/modules/auth/dto/createuserresponse.dto.ts:2",{"_index":242,"title":{},"body":{"classes/CreateUserResponse.html":{}}}],["src/modules/auth/dto/createuserresponse.dto.ts:4",{"_index":243,"title":{},"body":{"classes/CreateUserResponse.html":{}}}],["src/modules/auth/dto/createuserresponse.dto.ts:6",{"_index":241,"title":{},"body":{"classes/CreateUserResponse.html":{}}}],["src/modules/auth/dto/signinuser.dto.ts",{"_index":341,"title":{},"body":{"classes/SignInUserDTO.html":{},"coverage.html":{}}}],["src/modules/auth/dto/signinuser.dto.ts:12",{"_index":342,"title":{},"body":{"classes/SignInUserDTO.html":{}}}],["src/modules/auth/dto/signinuser.dto.ts:7",{"_index":343,"title":{},"body":{"classes/SignInUserDTO.html":{}}}],["src/modules/auth/interfaces/jwtpayload.interface.ts",{"_index":307,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/modules/auth/jwt.strategy.ts",{"_index":308,"title":{},"body":{"classes/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/jwt.strategy.ts:17",{"_index":312,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:9",{"_index":310,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["src/modules/auth/models/user.entity.ts",{"_index":569,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/modules/auth/models/user.entity.ts:17",{"_index":573,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/models/user.entity.ts:20",{"_index":578,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/models/user.entity.ts:23",{"_index":574,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/models/user.entity.ts:26",{"_index":575,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/models/user.entity.ts:29",{"_index":577,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/models/user.entity.ts:32",{"_index":571,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/models/user.entity.ts:35",{"_index":572,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/repository/user.respository.ts",{"_index":584,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/modules/auth/repository/user.respository.ts:19",{"_index":588,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/modules/auth/repository/user.respository.ts:21",{"_index":589,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/modules/auth/repository/user.respository.ts:56",{"_index":592,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/modules/auth/repository/user.respository.ts:78",{"_index":591,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/modules/auth/repository/user.respository.ts:86",{"_index":594,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/modules/health/dto/healthresponse.dto.ts",{"_index":268,"title":{},"body":{"classes/HealthResponse.html":{},"coverage.html":{}}}],["src/modules/health/dto/healthresponse.dto.ts:2",{"_index":269,"title":{},"body":{"classes/HealthResponse.html":{}}}],["src/modules/health/health.controller.ts",{"_index":253,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/modules/health/health.controller.ts:17",{"_index":260,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/modules/health/health.module.ts",{"_index":266,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/modules/logger/enums/loggercontext.enum.ts",{"_index":688,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/logger/enums/loggerlevels.enum.ts",{"_index":689,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/logger/logger.module.ts",{"_index":335,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/modules/logger/logger.service.ts",{"_index":337,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/modules/task/dto/createtask.dto.ts",{"_index":206,"title":{},"body":{"classes/CreateTaskDTO.html":{},"coverage.html":{}}}],["src/modules/task/dto/createtask.dto.ts:11",{"_index":210,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["src/modules/task/dto/createtask.dto.ts:15",{"_index":213,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["src/modules/task/dto/createtask.dto.ts:7",{"_index":214,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["src/modules/task/dto/filtertask.dto.ts",{"_index":245,"title":{},"body":{"classes/FilterTaskDTO.html":{},"coverage.html":{}}}],["src/modules/task/dto/filtertask.dto.ts:11",{"_index":250,"title":{},"body":{"classes/FilterTaskDTO.html":{}}}],["src/modules/task/dto/filtertask.dto.ts:7",{"_index":248,"title":{},"body":{"classes/FilterTaskDTO.html":{}}}],["src/modules/task/dto/taskresponse.dto.ts",{"_index":491,"title":{},"body":{"classes/TaskResponse.html":{},"coverage.html":{}}}],["src/modules/task/dto/taskresponse.dto.ts:10",{"_index":494,"title":{},"body":{"classes/TaskResponse.html":{}}}],["src/modules/task/dto/taskresponse.dto.ts:12",{"_index":498,"title":{},"body":{"classes/TaskResponse.html":{}}}],["src/modules/task/dto/taskresponse.dto.ts:14",{"_index":492,"title":{},"body":{"classes/TaskResponse.html":{}}}],["src/modules/task/dto/taskresponse.dto.ts:16",{"_index":493,"title":{},"body":{"classes/TaskResponse.html":{}}}],["src/modules/task/dto/taskresponse.dto.ts:4",{"_index":495,"title":{},"body":{"classes/TaskResponse.html":{}}}],["src/modules/task/dto/taskresponse.dto.ts:6",{"_index":497,"title":{},"body":{"classes/TaskResponse.html":{}}}],["src/modules/task/dto/taskresponse.dto.ts:8",{"_index":496,"title":{},"body":{"classes/TaskResponse.html":{}}}],["src/modules/task/dto/updatetask.dto.ts",{"_index":565,"title":{},"body":{"classes/UpdateTaskDTO.html":{},"coverage.html":{}}}],["src/modules/task/dto/updatetask.dto.ts:11",{"_index":566,"title":{},"body":{"classes/UpdateTaskDTO.html":{}}}],["src/modules/task/dto/updatetask.dto.ts:15",{"_index":567,"title":{},"body":{"classes/UpdateTaskDTO.html":{}}}],["src/modules/task/dto/updatetask.dto.ts:7",{"_index":568,"title":{},"body":{"classes/UpdateTaskDTO.html":{}}}],["src/modules/task/enums/taskstatus.enum.ts",{"_index":694,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/task/interfaces/taskservice.interface.ts",{"_index":271,"title":{},"body":{"interfaces/ITaskService.html":{},"coverage.html":{}}}],["src/modules/task/interfaces/taskservice.interface.ts:10",{"_index":278,"title":{},"body":{"interfaces/ITaskService.html":{}}}],["src/modules/task/interfaces/taskservice.interface.ts:11",{"_index":280,"title":{},"body":{"interfaces/ITaskService.html":{}}}],["src/modules/task/interfaces/taskservice.interface.ts:12",{"_index":287,"title":{},"body":{"interfaces/ITaskService.html":{}}}],["src/modules/task/interfaces/taskservice.interface.ts:8",{"_index":284,"title":{},"body":{"interfaces/ITaskService.html":{}}}],["src/modules/task/interfaces/taskservice.interface.ts:9",{"_index":282,"title":{},"body":{"interfaces/ITaskService.html":{}}}],["src/modules/task/models/task.entity.ts",{"_index":346,"title":{},"body":{"classes/Task.html":{},"coverage.html":{}}}],["src/modules/task/models/task.entity.ts:26",{"_index":357,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/task/models/task.entity.ts:29",{"_index":359,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/task/models/task.entity.ts:32",{"_index":358,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/task/models/task.entity.ts:35",{"_index":355,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/task/models/task.entity.ts:38",{"_index":364,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/task/models/task.entity.ts:42",{"_index":362,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/task/models/task.entity.ts:45",{"_index":351,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/task/models/task.entity.ts:48",{"_index":353,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/task/repository/task.repository.ts",{"_index":455,"title":{},"body":{"classes/TaskRepository.html":{},"coverage.html":{}}}],["src/modules/task/repository/task.repository.ts:13",{"_index":461,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/modules/task/repository/task.repository.ts:15",{"_index":464,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/modules/task/repository/task.repository.ts:41",{"_index":465,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/modules/task/repository/task.repository.ts:65",{"_index":463,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/modules/task/task.controller.ts",{"_index":373,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{}}}],["src/modules/task/task.controller.ts:126",{"_index":381,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/modules/task/task.controller.ts:156",{"_index":391,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/modules/task/task.controller.ts:189",{"_index":412,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/modules/task/task.controller.ts:65",{"_index":408,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/modules/task/task.controller.ts:95",{"_index":399,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/modules/task/task.module.ts",{"_index":449,"title":{},"body":{"modules/TaskModule.html":{}}}],["src/modules/task/task.service.ts",{"_index":499,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["src/modules/task/task.service.ts:15",{"_index":501,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/modules/task/task.service.ts:23",{"_index":505,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/modules/task/task.service.ts:30",{"_index":504,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/modules/task/task.service.ts:41",{"_index":502,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/modules/task/task.service.ts:48",{"_index":503,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/modules/task/task.service.ts:67",{"_index":506,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/modules/task/tests/mocks/authguard.mock.ts",{"_index":646,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/task/tests/mocks/taskservice.mock.ts",{"_index":528,"title":{},"body":{"classes/TaskServiceMock.html":{},"coverage.html":{}}}],["src/modules/task/tests/mocks/taskservice.mock.ts:10",{"_index":538,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["src/modules/task/tests/mocks/taskservice.mock.ts:20",{"_index":542,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["src/modules/task/tests/mocks/taskservice.mock.ts:24",{"_index":541,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["src/modules/task/tests/mocks/taskservice.mock.ts:29",{"_index":539,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["src/modules/task/tests/mocks/taskservice.mock.ts:34",{"_index":540,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["src/modules/task/tests/mocks/taskservice.mock.ts:38",{"_index":543,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["start",{"_index":722,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":725,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":727,"title":{},"body":{"index.html":{}}}],["started",{"_index":701,"title":{"index.html":{}},"body":{}}],["starter",{"_index":715,"title":{},"body":{"index.html":{}}}],["statements",{"_index":629,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":207,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/FilterTaskDTO.html":{},"controllers/HealthController.html":{},"classes/HealthResponse.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"classes/TaskServiceMock.html":{},"classes/UpdateTaskDTO.html":{}}}],["stay",{"_index":749,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":315,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["string",{"_index":12,"title":{},"body":{"classes/AccessToken.html":{},"interfaces/Configuration.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"classes/HealthResponse.html":{},"interfaces/ITaskService.html":{},"interfaces/JwtPayload.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["successfully",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{}}}],["successfully'})@apiunauthorizedresponse({description",{"_index":387,"title":{},"body":{"controllers/TaskController.html":{}}}],["summary",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TaskController.html":{}}}],["super",{"_index":323,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["support",{"_index":740,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":760,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":201,"title":{},"body":{"interfaces/Configuration.html":{},"injectables/TypeOrmConfigService.html":{}}}],["table",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":345,"title":{"classes/Task.html":{}},"body":{"classes/Task.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"coverage.html":{}}}],["task.controller",{"_index":450,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.description",{"_index":489,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.id",{"_index":475,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.service",{"_index":421,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["task.title",{"_index":488,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.user",{"_index":583,"title":{},"body":{"classes/User.html":{}}}],["task/models/task.entity",{"_index":581,"title":{},"body":{"classes/User.html":{}}}],["taskcontroller",{"_index":372,"title":{"controllers/TaskController.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["taskmodule",{"_index":33,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["taskrepository",{"_index":451,"title":{"classes/TaskRepository.html":{}},"body":{"modules/TaskModule.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["taskresponse",{"_index":288,"title":{"classes/TaskResponse.html":{}},"body":{"interfaces/ITaskService.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"coverage.html":{}}}],["taskresponse})@apiinternalservererrorresponse({description",{"_index":397,"title":{},"body":{"controllers/TaskController.html":{}}}],["taskresponse})@apiunauthorizedresponse({description",{"_index":378,"title":{},"body":{"controllers/TaskController.html":{}}}],["tasks",{"_index":400,"title":{},"body":{"controllers/TaskController.html":{},"classes/User.html":{}}}],["taskservice",{"_index":420,"title":{"injectables/TaskService.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["taskservicemock",{"_index":527,"title":{"classes/TaskServiceMock.html":{}},"body":{"classes/TaskServiceMock.html":{},"coverage.html":{}}}],["taskstatus",{"_index":211,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/FilterTaskDTO.html":{},"classes/Task.html":{},"classes/TaskResponse.html":{},"classes/TaskServiceMock.html":{},"classes/UpdateTaskDTO.html":{},"miscellaneous/enumerations.html":{}}}],["taskstatus.open",{"_index":532,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["tasktodelete",{"_index":440,"title":{},"body":{"controllers/TaskController.html":{}}}],["tasktoupdate",{"_index":444,"title":{},"body":{"controllers/TaskController.html":{}}}],["test",{"_index":730,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":733,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":732,"title":{},"body":{"index.html":{}}}],["tests",{"_index":729,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":738,"title":{},"body":{"index.html":{}}}],["this.authservice.createuser(createuserdto",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinuser(signinuserdto",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.buildtaskresponse(task",{"_index":476,"title":{},"body":{"classes/TaskRepository.html":{}}}],["this.configservice.get('database.host",{"_index":557,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.configservice.get('database.name",{"_index":561,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.configservice.get('database.password",{"_index":560,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.configservice.get('database.port",{"_index":558,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.configservice.get('database.synchronize",{"_index":564,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.configservice.get('database.username",{"_index":559,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.configservice.get('jwt.expiresin",{"_index":306,"title":{},"body":{"injectables/JwtConfigService.html":{}}}],["this.configservice.get('jwt.secret",{"_index":304,"title":{},"body":{"injectables/JwtConfigService.html":{}}}],["this.create",{"_index":603,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.create(createtaskdto",{"_index":471,"title":{},"body":{"classes/TaskRepository.html":{}}}],["this.createquerybuilder('task",{"_index":483,"title":{},"body":{"classes/TaskRepository.html":{}}}],["this.findone",{"_index":615,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.gettaskbyid(user",{"_index":525,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.hashpassword(password",{"_index":601,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.jwtservice.signasync(jwtpayload",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loggerservice.error",{"_index":478,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["this.loggerservice.error(errormessage",{"_index":613,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.loggerservice.log(`task",{"_index":512,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.loggerservice.log(`user",{"_index":607,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.loggerservice.setcontext(loggercontext.authcontroller",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.loggerservice.setcontext(loggercontext.taskcontroller",{"_index":427,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.loggerservice.setcontext(loggercontext.taskservice",{"_index":509,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.loggerservice.verbose",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{}}}],["this.loggerservice.warn",{"_index":519,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.mocktaskresponse",{"_index":547,"title":{},"body":{"classes/TaskServiceMock.html":{}}}],["this.save(partialtask",{"_index":474,"title":{},"body":{"classes/TaskRepository.html":{}}}],["this.taskrepository.buildtaskresponse(task",{"_index":514,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.createtask(user",{"_index":515,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.delete",{"_index":516,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.findone",{"_index":511,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.gettasks(user",{"_index":510,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.update(id",{"_index":526,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskservice.createtask(user",{"_index":438,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.deletetaskbyid(user",{"_index":441,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.gettaskbyid(user",{"_index":436,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.gettasks(user",{"_index":432,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.updatetask",{"_index":445,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.userrepository.createuser(createuserdto",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.findone",{"_index":328,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["this.userrepository.signinuser(signinuserdto",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepassword(password",{"_index":618,"title":{},"body":{"classes/UserRepository.html":{}}}],["throw",{"_index":329,"title":{},"body":{"classes/JwtStrategy.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["title",{"_index":208,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"classes/TaskServiceMock.html":{},"classes/UpdateTaskDTO.html":{}}}],["touch",{"_index":750,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/TaskService.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":473,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["twitter",{"_index":756,"title":{},"body":{"index.html":{}}}],["type",{"_index":10,"title":{},"body":{"classes/AccessToken.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Configuration.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"classes/FilterTaskDTO.html":{},"controllers/HealthController.html":{},"classes/HealthResponse.html":{},"interfaces/ITaskService.html":{},"injectables/JwtConfigService.html":{},"interfaces/JwtPayload.html":{},"classes/JwtStrategy.html":{},"classes/SignInUserDTO.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":369,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["typeormconfigservice",{"_index":46,"title":{"injectables/TypeOrmConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/TypeOrmConfigService.html":{},"coverage.html":{}}}],["typeormmodule",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{}}}],["typeormmodule.forfeature([taskrepository",{"_index":454,"title":{},"body":{"modules/TaskModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forrootasync",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":554,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["typeormoptionsfactory",{"_index":555,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["types/bcrypt",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":714,"title":{},"body":{"index.html":{}}}],["ui",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":428,"title":{},"body":{"controllers/TaskController.html":{}}}],["unauthorized'})@apiinternalservererrorresponse({description",{"_index":379,"title":{},"body":{"controllers/TaskController.html":{}}}],["unauthorized'})@apinotfoundresponse({description",{"_index":388,"title":{},"body":{"controllers/TaskController.html":{}}}],["unauthorized'})@apiokresponse({description",{"_index":395,"title":{},"body":{"controllers/TaskController.html":{}}}],["unauthorizedexception",{"_index":318,"title":{},"body":{"classes/JwtStrategy.html":{},"classes/UserRepository.html":{}}}],["unauthorizedexception(`username",{"_index":330,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["unauthorizedexception(errormessage",{"_index":619,"title":{},"body":{"classes/UserRepository.html":{}}}],["undefined",{"_index":513,"title":{},"body":{"injectables/TaskService.html":{},"classes/User.html":{}}}],["undefined)@joincolumn({name",{"_index":361,"title":{},"body":{"classes/Task.html":{}}}],["undefined})@apiunauthorizedresponse({description",{"_index":406,"title":{},"body":{"controllers/TaskController.html":{}}}],["unexpected",{"_index":520,"title":{},"body":{"injectables/TaskService.html":{}}}],["unique",{"_index":579,"title":{},"body":{"classes/User.html":{}}}],["unique(['username",{"_index":582,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":728,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["up",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["update",{"_index":409,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updated",{"_index":410,"title":{},"body":{"controllers/TaskController.html":{}}}],["updatedatecolumn",{"_index":352,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["updatetask",{"_index":276,"title":{},"body":{"interfaces/ITaskService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["updatetask(id",{"_index":285,"title":{},"body":{"interfaces/ITaskService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["updatetaskdto",{"_index":286,"title":{"classes/UpdateTaskDTO.html":{}},"body":{"interfaces/ITaskService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"classes/UpdateTaskDTO.html":{},"coverage.html":{}}}],["useclass",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":417,"title":{},"body":{"controllers/TaskController.html":{}}}],["useguards(authguard('jwt",{"_index":426,"title":{},"body":{"controllers/TaskController.html":{}}}],["usepipes",{"_index":416,"title":{},"body":{"controllers/TaskController.html":{}}}],["usepipes(validationpipe",{"_index":429,"title":{},"body":{"controllers/TaskController.html":{}}}],["user",{"_index":73,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITaskService.html":{},"classes/JwtStrategy.html":{},"classes/Task.html":{},"controllers/TaskController.html":{},"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["user.datetimecreated",{"_index":608,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.id",{"_index":485,"title":{},"body":{"classes/TaskRepository.html":{},"injectables/TaskService.html":{},"classes/UserRepository.html":{}}}],["user.password",{"_index":625,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.salt",{"_index":624,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.tasks",{"_index":371,"title":{},"body":{"classes/Task.html":{}}}],["user.username",{"_index":430,"title":{},"body":{"controllers/TaskController.html":{},"classes/UserRepository.html":{}}}],["userid",{"_index":349,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskResponse.html":{},"injectables/TaskService.html":{},"classes/TaskServiceMock.html":{}}}],["username",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Configuration.html":{},"classes/CreateUserDTO.html":{},"classes/CreateUserResponse.html":{},"interfaces/JwtPayload.html":{},"classes/JwtStrategy.html":{},"classes/SignInUserDTO.html":{},"injectables/TypeOrmConfigService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["userrepository",{"_index":160,"title":{"classes/UserRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["valid",{"_index":331,"title":{},"body":{"classes/JwtStrategy.html":{},"classes/SignInUserDTO.html":{}}}],["validate",{"_index":309,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["validate(payload",{"_index":311,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["validatepassword",{"_index":586,"title":{},"body":{"classes/UserRepository.html":{}}}],["validatepassword(inputpassword",{"_index":593,"title":{},"body":{"classes/UserRepository.html":{}}}],["validationpipe",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["validator",{"_index":218,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterTaskDTO.html":{},"classes/SignInUserDTO.html":{},"classes/UpdateTaskDTO.html":{},"dependencies.html":{}}}],["value",{"_index":459,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TaskServiceMock.html":{},"classes/UserRepository.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":636,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":768,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbose",{"_index":691,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["warn",{"_index":693,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["watch",{"_index":723,"title":{},"body":{"index.html":{}}}],["website",{"_index":754,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":743,"title":{},"body":{"index.html":{}}}],["z])(?=.*[a",{"_index":234,"title":{},"body":{"classes/CreateUserDTO.html":{},"miscellaneous/variables.html":{}}}],["z]).{8,32",{"_index":235,"title":{},"body":{"classes/CreateUserDTO.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoggerModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AccessToken.html":{"url":"classes/AccessToken.html","title":"class - AccessToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccessToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/accessToken.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bearerToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bearerToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/dto/accessToken.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AccessToken {\n  bearerToken: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            TaskModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TaskModule } from './modules/task/task.module';\nimport { TypeOrmConfigService } from './config/typeorm.config';\nimport { AuthModule } from './modules/auth/auth.module';\nimport configuration from './config/configuration';\nimport { LoggerModule } from './modules/logger/logger.module';\nimport { HealthModule } from './modules/health/health.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true, load: [configuration] }),\n    TypeOrmModule.forRootAsync({\n      useClass: TypeOrmConfigService,\n    }),\n    TaskModule,\n    AuthModule,\n    LoggerModule,\n    HealthModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signin\n                            \n                            \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signin(signInUserDTO: SignInUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User sign in', description: 'Sign in an existing user with username and password'})@ApiCreatedResponse({description: 'User signed in successfully', type: AccessToken})@ApiNotFoundResponse({description: 'User not found'})@ApiUnauthorizedResponse({description: 'Passwords do not match'})@ApiInternalServerErrorResponse({description: 'Internal server error'})@Post('/signin')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInUserDTO\n                                    \n                                                SignInUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(createUserDTO: CreateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User sign up', description: 'Sign up a new user with username and password'})@ApiCreatedResponse({description: 'User signed up successfully', type: CreateUserResponse})@ApiConflictResponse({description: 'User credentials already exist'})@ApiInternalServerErrorResponse({description: 'Internal server error'})@Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, ValidationPipe } from '@nestjs/common';\n\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiInternalServerErrorResponse,\n  ApiConflictResponse,\n  ApiCreatedResponse,\n  ApiNotFoundResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { CreateUserDTO } from './dto/createUser.dto';\nimport { CreateUserResponse } from './dto/createUserResponse.dto';\nimport { SignInUserDTO } from './dto/signInUser.dto';\nimport { AccessToken } from './dto/accessToken.dto';\nimport { LoggerContext } from '../logger/enums/loggerContext.enum';\nimport { LoggerService } from '../logger/logger.service';\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private authService: AuthService,\n    private loggerService: LoggerService,\n  ) {\n    this.loggerService.setContext(LoggerContext.AUTHCONTROLLER);\n  }\n\n  @ApiOperation({\n    summary: 'User sign up',\n    description: 'Sign up a new user with username and password',\n  })\n  @ApiCreatedResponse({\n    description: 'User signed up successfully',\n    type: CreateUserResponse,\n  })\n  @ApiConflictResponse({\n    description: 'User credentials already exist',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Internal server error',\n  })\n  @Post('/signup')\n  async signup(\n    @Body(ValidationPipe) createUserDTO: CreateUserDTO,\n  ): Promise {\n    this.loggerService.verbose(\n      `Create User request received: ${JSON.stringify(createUserDTO)}`,\n    );\n\n    return this.authService.createUser(createUserDTO);\n  }\n\n  @ApiOperation({\n    summary: 'User sign in',\n    description: 'Sign in an existing user with username and password',\n  })\n  @ApiCreatedResponse({\n    description: 'User signed in successfully',\n    type: AccessToken,\n  })\n  @ApiNotFoundResponse({\n    description: 'User not found',\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Passwords do not match',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Internal server error',\n  })\n  @Post('/signin')\n  async signin(\n    @Body(ValidationPipe) signInUserDTO: SignInUserDTO,\n  ): Promise {\n    this.loggerService.verbose(\n      `Sign In request received: ${JSON.stringify(signInUserDTO)}`,\n    );\n\n    return this.authService.signInUser(signInUserDTO);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nLoggerModule\n\nLoggerModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nLoggerModule->AuthModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            LoggerModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UserRepository } from './repository/user.respository';\nimport { JwtConfigService } from '../../config/jwt.config';\nimport { JwtStrategy } from './jwt.strategy';\nimport { LoggerModule } from '../logger/logger.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      useClass: JwtConfigService,\n    }),\n    LoggerModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                signInUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDTO: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signInUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signInUser(signInUserDTO: SignInUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInUserDTO\n                                    \n                                                SignInUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserRepository } from './repository/user.respository';\nimport { CreateUserDTO } from './dto/createUser.dto';\nimport { CreateUserResponse } from './dto/createUserResponse.dto';\nimport { SignInUserDTO } from './dto/signInUser.dto';\nimport { AccessToken } from './dto/accessToken.dto';\nimport { User } from './models/user.entity';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: UserRepository,\n    private jwtService: JwtService,\n  ) {}\n\n  async createUser(createUserDTO: CreateUserDTO): Promise {\n    return this.userRepository.createUser(createUserDTO);\n  }\n\n  async signInUser(signInUserDTO: SignInUserDTO): Promise {\n    const jwtPayload = await this.userRepository.signInUser(signInUserDTO);\n\n    const bearerToken = await this.jwtService.signAsync(jwtPayload);\n\n    return { bearerToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Configuration.html":{"url":"interfaces/Configuration.html","title":"interface - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/configuration.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        database\n                                \n                                \n                                        jwt\n                                \n                                \n                                        server\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        database\n                                    \n                                \n                                \n                                    \n                                        database:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                    \n                                \n                                \n                                    \n                                        jwt:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        server\n                                    \n                                \n                                \n                                    \n                                        server:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { LogLevel } from '@nestjs/common';\n\nexport interface Configuration {\n  database: {\n    host: string;\n    username: string;\n    password: string;\n    name: string;\n    port: number;\n    synchronize: boolean;\n  };\n  server: {\n    logLevel: LogLevel[];\n    port: number;\n  };\n  jwt: {\n    secret: string;\n    expiresIn: string;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDTO.html":{"url":"classes/CreateTaskDTO.html","title":"class - CreateTaskDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/task/dto/createTask.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/dto/createTask.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/dto/createTask.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/dto/createTask.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsIn } from 'class-validator';\nimport { TaskStatus } from '../enums/taskStatus.enum';\n\nexport class CreateTaskDTO {\n  @IsNotEmpty()\n  @IsString()\n  title: string;\n\n  @IsNotEmpty()\n  @IsString()\n  description: string;\n\n  @IsNotEmpty()\n  @IsIn([...Object.values(TaskStatus)])\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDTO.html":{"url":"classes/CreateUserDTO.html","title":"class - CreateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/createUser.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@Matches(passwordRegex, {message: 'Password does not match complexity requirements'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/dto/createUser.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/dto/createUser.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, Matches } from 'class-validator';\n\n// https://gist.github.com/arielweinberger/18a29bfa17072444d45adaeeb8e92ddc\nexport const passwordRegex = new RegExp(\n  /((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).{8,32}$/,\n);\n\nexport class CreateUserDTO {\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Matches(passwordRegex, {\n    message: 'Password does not match complexity requirements',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserResponse.html":{"url":"classes/CreateUserResponse.html","title":"class - CreateUserResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/createUserResponse.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dateTimeCreated\n                            \n                            \n                                id\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateTimeCreated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/dto/createUserResponse.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/dto/createUserResponse.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/dto/createUserResponse.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserResponse {\n  id: string;\n\n  username: string;\n\n  dateTimeCreated: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterTaskDTO.html":{"url":"classes/FilterTaskDTO.html","title":"class - FilterTaskDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterTaskDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/task/dto/filterTask.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                searchTerm\n                            \n                            \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            searchTerm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/dto/filterTask.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/dto/filterTask.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsIn } from 'class-validator';\nimport { TaskStatus } from '../enums/taskStatus.enum';\n\nexport class FilterTaskDTO {\n  @IsOptional()\n  @IsString()\n  searchTerm?: string;\n\n  @IsOptional()\n  @IsIn([...Object.values(TaskStatus)])\n  status?: TaskStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkHealth\n                        \n                        \n                    \n                \n            \n            \n                \ncheckHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get server status', description: 'Check the health of the server'})@ApiOkResponse({description: 'Server is ok', type: HealthResponse})@Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/health/health.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         HealthResponse\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiOkResponse } from '@nestjs/swagger';\nimport { HealthResponse } from './dto/healthResponse.dto';\n\n@ApiTags('Health')\n@Controller('health')\nexport class HealthController {\n  @ApiOperation({\n    summary: 'Get server status',\n    description: 'Check the health of the server',\n  })\n  @ApiOkResponse({\n    description: 'Server is ok',\n    type: HealthResponse,\n  })\n  @Get()\n  checkHealth(): HealthResponse {\n    return { status: 'ok' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/health/health.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HealthController } from './health.controller';\n\n@Module({\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HealthResponse.html":{"url":"classes/HealthResponse.html","title":"class - HealthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HealthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/health/dto/healthResponse.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/health/dto/healthResponse.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class HealthResponse {\n  status: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITaskService.html":{"url":"interfaces/ITaskService.html","title":"interface - ITaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/task/interfaces/taskService.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    createTask\n                                \n                                \n                                    deleteTaskById\n                                \n                                \n                                    getTaskById\n                                \n                                \n                                    getTasks\n                                \n                                \n                                    updateTask\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTask(user: User, createTaskDTO: CreateTaskDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/interfaces/taskService.interface.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createTaskDTO\n                                    \n                                                CreateTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteTaskById(user: User, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/interfaces/taskService.interface.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ngetTaskById(user: User, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/interfaces/taskService.interface.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetTasks(user: User, filterTaskDTO: FilterTaskDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/interfaces/taskService.interface.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterTaskDTO\n                                    \n                                                FilterTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTask(id: string, user: User, updateTaskDTO: UpdateTaskDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/interfaces/taskService.interface.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskDTO\n                                    \n                                                UpdateTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TaskResponse } from '../dto/taskResponse.dto';\nimport { FilterTaskDTO } from '../dto/filterTask.dto';\nimport { User } from '../../auth/models/user.entity';\nimport { CreateTaskDTO } from '../dto/createTask.dto';\nimport { UpdateTaskDTO } from '../dto/updateTask.dto';\n\nexport interface ITaskService {\n  getTasks(user: User, filterTaskDTO: FilterTaskDTO): Promise;\n  getTaskById(user: User, id: string): Promise;\n  createTask(user: User, createTaskDTO: CreateTaskDTO): Promise;\n  deleteTaskById(user: User, id: string): Promise;\n  updateTask(\n    id: string,\n    user: User,\n    updateTaskDTO: UpdateTaskDTO,\n  ): Promise;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtConfigService.html":{"url":"injectables/JwtConfigService.html","title":"injectable - JwtConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/jwt.config.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createJwtOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/config/jwt.config.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createJwtOptions\n                        \n                        \n                    \n                \n            \n            \n                \ncreateJwtOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/config/jwt.config.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     JwtModuleOptions\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { JwtOptionsFactory, JwtModuleOptions } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JwtConfigService implements JwtOptionsFactory {\n  constructor(private configService: ConfigService) {}\n\n  createJwtOptions(): JwtModuleOptions {\n    return {\n      secret: this.configService.get('jwt.secret'),\n      signOptions: {\n        expiresIn: this.configService.get('jwt.expiresIn'),\n      },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/jwtPayload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  username: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtStrategy.html":{"url":"classes/JwtStrategy.html","title":"class - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { JwtPayload } from './interfaces/jwtPayload.interface';\nimport { UserRepository } from './repository/user.respository';\nimport { User } from './models/user.entity';\n\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(@InjectRepository(User) private userRepository: UserRepository) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    const { username } = payload;\n\n    const user = await this.userRepository.findOne({ username });\n\n    if (user) return user;\n\n    throw new UnauthorizedException(`Username ${username} is not valid`);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nLoggerService \n\nLoggerService \n\n\n\nLoggerModule\n\nLoggerModule\n\nLoggerService  -->\n\nLoggerModule->LoggerService \n\n\n\n\n\nLoggerService\n\nLoggerService\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/logger/logger.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LoggerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LoggerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { LoggerService } from './logger.service';\n\n@Module({\n  providers: [LoggerService],\n  exports: [LoggerService],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/logger/logger.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Logger\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable, Scope, Logger } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class LoggerService extends Logger {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInUserDTO.html":{"url":"classes/SignInUserDTO.html","title":"class - SignInUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/signInUser.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@Matches(passwordRegex, {message: 'Not a valid password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/dto/signInUser.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/dto/signInUser.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Matches, IsNotEmpty, IsString } from 'class-validator';\nimport { passwordRegex } from './createUser.dto';\n\nexport class SignInUserDTO {\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Matches(passwordRegex, { message: 'Not a valid password' })\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/task/models/task.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dateTimeCreated\n                            \n                            \n                                dateTimeModified\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateTimeCreated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/models/task.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateTimeModified\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/models/task.entity.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/models/task.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/models/task.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/models/task.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/models/task.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)@JoinColumn({name: 'userId'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/models/task.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({name: 'userId'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/models/task.entity.ts:38\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { TaskStatus } from '../enums/taskStatus.enum';\nimport { User } from '../../auth/models/user.entity';\n\n@Entity()\nexport class Task extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  title: string;\n\n  @Column()\n  status: TaskStatus;\n\n  @Column()\n  description: string;\n\n  @Column({ name: 'userId' })\n  userId: string;\n\n  @ManyToOne((type) => User, (user) => user.tasks)\n  @JoinColumn({ name: 'userId' })\n  user: User;\n\n  @CreateDateColumn()\n  dateTimeCreated: Date;\n\n  @UpdateDateColumn()\n  dateTimeModified: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskController.html":{"url":"controllers/TaskController.html","title":"controller - TaskController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/task/task.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                task\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                    Async\n                                getTask\n                            \n                            \n                                    Async\n                                getTasks\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(user: User, createTaskDTO: CreateTaskDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create task', description: 'Create a task with a body'})@ApiCreatedResponse({description: 'Task created successfully', type: TaskResponse})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiInternalServerErrorResponse({description: 'Internal server error'})@Post()@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/modules/task/task.controller.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createTaskDTO\n                                    \n                                                CreateTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(user: User, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a task', description: 'Delete a task with a given ID'})@ApiOkResponse({description: 'Task deleted successfully'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiNotFoundResponse({description: 'Task to delete with ID not found'})@ApiInternalServerErrorResponse({description: 'Internal server error'})@Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/task/task.controller.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTask(user: User, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get task by ID', description: 'Fetches task by ID'})@ApiNotFoundResponse({description: 'Task with ID not found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiOkResponse({description: 'Retrieved task successfully', type: TaskResponse})@ApiInternalServerErrorResponse({description: 'Internal server error'})@Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/task/task.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasks(user: User, filterTaskDTO: FilterTaskDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all tasks', description: 'Fetches all tasks from the database for a given user. Optional filter query parameters'})@ApiOkResponse({description: 'Retrieved list of active tasks successfully', type: undefined})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiInternalServerErrorResponse({description: 'Internal server error'})@Get()@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/modules/task/task.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterTaskDTO\n                                    \n                                                FilterTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(id: string, user: User, updateTaskDTO: UpdateTaskDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update a task', description: 'Update a task with a given ID'})@ApiOkResponse({description: 'Task updated successfully'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiNotFoundResponse({description: 'Task to update with ID not found'})@ApiInternalServerErrorResponse({description: 'Internal server error'})@Patch('/:id')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/modules/task/task.controller.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskDTO\n                                    \n                                                UpdateTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  NotFoundException,\n  Patch,\n  UsePipes,\n  ValidationPipe,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n  ApiTags,\n  ApiBearerAuth,\n  ApiOperation,\n  ApiOkResponse,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiCreatedResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { CreateTaskDTO } from './dto/createTask.dto';\nimport { TaskService } from './task.service';\nimport { UpdateTaskDTO } from './dto/updateTask.dto';\nimport { FilterTaskDTO } from './dto/filterTask.dto';\nimport { GetUser } from '../auth/decorators/getUser.decorator';\nimport { User } from '../auth/models/user.entity';\nimport { TaskResponse } from './dto/taskResponse.dto';\nimport { LoggerContext } from '../logger/enums/loggerContext.enum';\nimport { LoggerService } from '../logger/logger.service';\n\n@ApiBearerAuth()\n@ApiTags('Task')\n@Controller('task')\n@UseGuards(AuthGuard('jwt'))\nexport class TaskController {\n  constructor(\n    private taskService: TaskService,\n    private loggerService: LoggerService,\n  ) {\n    this.loggerService.setContext(LoggerContext.TASKCONTROLLER);\n  }\n\n  @ApiOperation({\n    summary: 'Get all tasks',\n    description:\n      'Fetches all tasks from the database for a given user. Optional filter query parameters',\n  })\n  @ApiOkResponse({\n    description: 'Retrieved list of active tasks successfully',\n    type: [TaskResponse],\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Internal server error',\n  })\n  @Get()\n  @UsePipes(ValidationPipe)\n  async getTasks(\n    @GetUser() user: User,\n    @Query() filterTaskDTO: FilterTaskDTO,\n  ): Promise {\n    this.loggerService.verbose(\n      `Get Tasks request received from ${user.username}: ${JSON.stringify(\n        filterTaskDTO,\n      )}`,\n    );\n    return this.taskService.getTasks(user, filterTaskDTO);\n  }\n\n  @ApiOperation({\n    summary: 'Get task by ID',\n    description: 'Fetches task by ID',\n  })\n  @ApiNotFoundResponse({\n    description: 'Task with ID not found',\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized',\n  })\n  @ApiOkResponse({\n    description: 'Retrieved task successfully',\n    type: TaskResponse,\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Internal server error',\n  })\n  @Get('/:id')\n  async getTask(\n    @GetUser() user: User,\n    @Param('id') id: string,\n  ): Promise {\n    this.loggerService.verbose(\n      `Get Task By ID request received from ${user.username}: Task ID ${id}`,\n    );\n\n    const response = await this.taskService.getTaskById(user, id);\n\n    if (!response) throw new NotFoundException(`Task with ID ${id} not found`);\n\n    return response;\n  }\n\n  @ApiOperation({\n    summary: 'Create task',\n    description: 'Create a task with a body',\n  })\n  @ApiCreatedResponse({\n    description: 'Task created successfully',\n    type: TaskResponse,\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Internal server error',\n  })\n  @Post()\n  @UsePipes(ValidationPipe)\n  async createTask(\n    @GetUser() user: User,\n    @Body() createTaskDTO: CreateTaskDTO,\n  ): Promise {\n    this.loggerService.verbose(\n      `Create Task request received from ${user.username}: ${JSON.stringify(\n        createTaskDTO,\n      )}`,\n    );\n\n    return this.taskService.createTask(user, createTaskDTO);\n  }\n\n  @ApiOperation({\n    summary: 'Delete a task',\n    description: 'Delete a task with a given ID',\n  })\n  @ApiOkResponse({\n    description: 'Task deleted successfully',\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized',\n  })\n  @ApiNotFoundResponse({\n    description: 'Task to delete with ID not found',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Internal server error',\n  })\n  @Delete('/:id')\n  async deleteTask(\n    @GetUser() user: User,\n    @Param('id') id: string,\n  ): Promise {\n    this.loggerService.verbose(\n      `Delete Task request from ${user.username}: Task ID ${id}`,\n    );\n\n    const taskToDelete = await this.taskService.deleteTaskById(user, id);\n\n    if (!taskToDelete) {\n      throw new NotFoundException(`Task to delete with ID ${id} not found`);\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Update a task',\n    description: 'Update a task with a given ID',\n  })\n  @ApiOkResponse({\n    description: 'Task updated successfully',\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized',\n  })\n  @ApiNotFoundResponse({\n    description: 'Task to update with ID not found',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Internal server error',\n  })\n  @Patch('/:id')\n  @UsePipes(ValidationPipe)\n  async updateTask(\n    @Param('id') id: string,\n    @GetUser() user: User,\n    @Body() updateTaskDTO: UpdateTaskDTO,\n  ): Promise {\n    this.loggerService.verbose(\n      `Update Task request from ${\n        user.username\n      }: Task ID ${id} ${JSON.stringify(updateTaskDTO)}`,\n    );\n\n    const taskToUpdate = await this.taskService.updateTask(\n      id,\n      user,\n      updateTaskDTO,\n    );\n\n    if (!taskToUpdate) {\n      throw new NotFoundException(`Task to update with ID ${id} not found`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n    Modules\n    TaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_imports\n\n\n\ncluster_TaskModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTaskModule\n\nTaskModule\n\nTaskModule -->\n\nAuthModule->TaskModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nTaskModule -->\n\nLoggerModule->TaskModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/task/task.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TaskService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TaskController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            LoggerModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { TaskService } from './task.service';\nimport { TaskController } from './task.controller';\nimport { TaskRepository } from './repository/task.repository';\nimport { AuthModule } from '../auth/auth.module';\nimport { LoggerModule } from '../logger/logger.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([TaskRepository]),\n    AuthModule,\n    LoggerModule,\n  ],\n  controllers: [TaskController],\n  providers: [TaskService],\n})\nexport class TaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskRepository.html":{"url":"classes/TaskRepository.html","title":"class - TaskRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/task/repository/task.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                loggerService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildTaskResponse\n                            \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                getTasks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loggerService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new LoggerService(LoggerContext.TASKREPOSITORY)\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/repository/task.repository.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildTaskResponse\n                        \n                        \n                    \n                \n            \n            \n                \nbuildTaskResponse(task: Task)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/repository/task.repository.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    task\n                                    \n                                                Task\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TaskResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(user: User, createTaskDTO: CreateTaskDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/repository/task.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createTaskDTO\n                                    \n                                                CreateTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasks(user: User, filterTaskDTO: FilterTaskDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/repository/task.repository.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterTaskDTO\n                                    \n                                                FilterTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Repository, EntityRepository } from 'typeorm';\nimport { InternalServerErrorException } from '@nestjs/common';\nimport { Task } from '../models/task.entity';\nimport { CreateTaskDTO } from '../dto/createTask.dto';\nimport { FilterTaskDTO } from '../dto/filterTask.dto';\nimport { User } from '../../auth/models/user.entity';\nimport { TaskResponse } from '../dto/taskResponse.dto';\nimport { LoggerContext } from '../../logger/enums/loggerContext.enum';\nimport { LoggerService } from '../../logger/logger.service';\n\n@EntityRepository(Task)\nexport class TaskRepository extends Repository {\n  private loggerService = new LoggerService(LoggerContext.TASKREPOSITORY);\n\n  async createTask(\n    user: User,\n    createTaskDTO: CreateTaskDTO,\n  ): Promise {\n    const partialTask = this.create(createTaskDTO);\n\n    partialTask.user = user;\n\n    try {\n      const task = await this.save(partialTask);\n\n      this.loggerService.verbose(\n        `Successfully created task with ID: ${task.id}`,\n      );\n\n      return this.buildTaskResponse(task);\n    } catch (error) {\n      this.loggerService.error(\n        `Failed to save task to DB: ${error.stack} : ${JSON.stringify(\n          createTaskDTO,\n        )}`,\n      );\n      throw new InternalServerErrorException();\n    }\n  }\n\n  async getTasks(\n    user: User,\n    filterTaskDTO: FilterTaskDTO,\n  ): Promise {\n    const { status, searchTerm } = filterTaskDTO;\n\n    const query = this.createQueryBuilder('task');\n\n    query.where('task.userId = :userId', { userId: user.id });\n\n    if (status) {\n      query.andWhere('task.status = :status', { status });\n    }\n\n    if (searchTerm) {\n      query.andWhere(\n        '(task.title LIKE :searchTerm OR task.description LIKE :searchTerm)',\n        { searchTerm: `%${searchTerm}%` },\n      );\n    }\n\n    return query.getMany();\n  }\n\n  buildTaskResponse(task: Task): TaskResponse {\n    const {\n      id,\n      status,\n      description,\n      title,\n      userId,\n      dateTimeCreated,\n      dateTimeModified,\n    } = task;\n\n    return {\n      id,\n      status,\n      description,\n      title,\n      userId,\n      dateTimeCreated,\n      dateTimeModified,\n    };\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskResponse.html":{"url":"classes/TaskResponse.html","title":"class - TaskResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/task/dto/taskResponse.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dateTimeCreated\n                            \n                            \n                                dateTimeModified\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateTimeCreated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/dto/taskResponse.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateTimeModified\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/dto/taskResponse.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/dto/taskResponse.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/dto/taskResponse.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/dto/taskResponse.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/dto/taskResponse.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/dto/taskResponse.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TaskStatus } from '../enums/taskStatus.enum';\n\nexport class TaskResponse {\n  id: string;\n\n  title: string;\n\n  status: TaskStatus;\n\n  description: string;\n\n  userId: string;\n\n  dateTimeCreated: Date;\n\n  dateTimeModified: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/task/task.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteTaskById\n                            \n                            \n                                    Async\n                                getTaskById\n                            \n                            \n                                    Async\n                                getTasks\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: TaskRepository, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/task/task.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        TaskRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(user: User, createTaskDTO: CreateTaskDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/task.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createTaskDTO\n                                    \n                                                CreateTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTaskById(user: User, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/task.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskById(user: User, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/task.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasks(user: User, filterTaskDTO: FilterTaskDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/task.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterTaskDTO\n                                    \n                                                FilterTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(id: string, user: User, updateTaskDTO: UpdateTaskDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/task.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskDTO\n                                    \n                                                UpdateTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRepository } from '@nestjs/typeorm';\nimport { Injectable } from '@nestjs/common';\nimport { CreateTaskDTO } from './dto/createTask.dto';\nimport { Task } from './models/task.entity';\nimport { UpdateTaskDTO } from './dto/updateTask.dto';\nimport { FilterTaskDTO } from './dto/filterTask.dto';\nimport { TaskRepository } from './repository/task.repository';\nimport { User } from '../auth/models/user.entity';\nimport { TaskResponse } from './dto/taskResponse.dto';\nimport { LoggerContext } from '../logger/enums/loggerContext.enum';\nimport { ITaskService } from './interfaces/taskService.interface';\nimport { LoggerService } from '../logger/logger.service';\n\n@Injectable()\nexport class TaskService implements ITaskService {\n  constructor(\n    @InjectRepository(Task) private taskRepository: TaskRepository,\n    private loggerService: LoggerService,\n  ) {\n    this.loggerService.setContext(LoggerContext.TASKSERVICE);\n  }\n\n  async getTasks(\n    user: User,\n    filterTaskDTO: FilterTaskDTO,\n  ): Promise {\n    return this.taskRepository.getTasks(user, filterTaskDTO);\n  }\n\n  async getTaskById(user: User, id: string): Promise {\n    const task = await this.taskRepository.findOne({ where: { id, user } });\n\n    if (!task) {\n      this.loggerService.log(`Task with ID ${id} not found`);\n      return undefined;\n    }\n\n    return this.taskRepository.buildTaskResponse(task);\n  }\n\n  async createTask(\n    user: User,\n    createTaskDTO: CreateTaskDTO,\n  ): Promise {\n    return this.taskRepository.createTask(user, createTaskDTO);\n  }\n\n  async deleteTaskById(user: User, id: string): Promise {\n    const result = await this.taskRepository.delete({ id, userId: user.id });\n\n    if (result && result.affected === 1) return true;\n\n    if (result && result.affected !== 1) {\n      this.loggerService.warn(\n        `Unexpected number of rows affected by delete operation: ${JSON.stringify(\n          result,\n        )}`,\n      );\n      return false;\n    }\n\n    this.loggerService.log(`Task to delete with ID ${id} not found`);\n\n    return false;\n  }\n\n  async updateTask(\n    id: string,\n    user: User,\n    updateTaskDTO: UpdateTaskDTO,\n  ): Promise {\n    const task = await this.getTaskById(user, id);\n\n    if (!task) return false;\n\n    const result = await this.taskRepository.update(id, updateTaskDTO);\n\n    if (result && result.affected === 1) return true;\n\n    if (result && result.affected !== 1)\n      this.loggerService.warn(\n        `Unexpected number of rows affected by update operation: ${JSON.stringify(\n          result,\n        )}`,\n      );\n\n    this.loggerService.log(`Task to update with ID ${id} not found`);\n\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskServiceMock.html":{"url":"classes/TaskServiceMock.html","title":"class - TaskServiceMock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskServiceMock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/task/tests/mocks/taskService.mock.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            ITaskService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                mockTaskResponse\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTask\n                            \n                            \n                                deleteTaskById\n                            \n                            \n                                getTaskById\n                            \n                            \n                                getTasks\n                            \n                            \n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            mockTaskResponse\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskResponse\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    id: 'mockId',\n    title: 'mockTitle',\n    status: TaskStatus.OPEN,\n    description: 'mockDescription',\n    userId: 'mockUserId',\n    dateTimeCreated: new Date('10-10-2000'),\n    dateTimeModified: new Date('10-10-2000'),\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/tests/mocks/taskService.mock.ts:10\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTask(user: User, createTaskDTO: CreateTaskDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/tests/mocks/taskService.mock.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createTaskDTO\n                                    \n                                                CreateTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteTaskById(user: User, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/tests/mocks/taskService.mock.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ngetTaskById(user: User, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/tests/mocks/taskService.mock.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetTasks(user: User, filterTaskDTO: FilterTaskDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/tests/mocks/taskService.mock.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterTaskDTO\n                                    \n                                                FilterTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTask(id: string, user: User, updateTaskDTO: UpdateTaskDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/tests/mocks/taskService.mock.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskDTO\n                                    \n                                                UpdateTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ITaskService } from '../../interfaces/taskService.interface';\nimport { User } from '../../../auth/models/user.entity';\nimport { FilterTaskDTO } from '../../dto/filterTask.dto';\nimport { CreateTaskDTO } from '../../dto/createTask.dto';\nimport { UpdateTaskDTO } from '../../dto/updateTask.dto';\nimport { TaskResponse } from '../../dto/taskResponse.dto';\nimport { TaskStatus } from '../../enums/taskStatus.enum';\n\nexport class TaskServiceMock implements ITaskService {\n  private mockTaskResponse: TaskResponse = {\n    id: 'mockId',\n    title: 'mockTitle',\n    status: TaskStatus.OPEN,\n    description: 'mockDescription',\n    userId: 'mockUserId',\n    dateTimeCreated: new Date('10-10-2000'),\n    dateTimeModified: new Date('10-10-2000'),\n  };\n\n  getTasks(user: User, filterTaskDTO: FilterTaskDTO): Promise {\n    return new Promise((resolve) => resolve([this.mockTaskResponse]));\n  }\n\n  getTaskById(user: User, id: string): Promise {\n    const mockResponse: TaskResponse = { ...this.mockTaskResponse, id };\n    return new Promise((resolve) => resolve(mockResponse));\n  }\n\n  createTask(user: User, createTaskDTO: CreateTaskDTO): Promise {\n    const mockResponse = { ...this.mockTaskResponse, ...createTaskDTO };\n    return new Promise((resolve) => resolve(mockResponse));\n  }\n\n  deleteTaskById(user: User, id: string): Promise {\n    return new Promise((resolve) => resolve(true));\n  }\n\n  updateTask(\n    id: string,\n    user: User,\n    updateTaskDTO: UpdateTaskDTO,\n  ): Promise {\n    return new Promise((resolve) => resolve(true));\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TypeOrmConfigService.html":{"url":"injectables/TypeOrmConfigService.html","title":"injectable - TypeOrmConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TypeOrmConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/typeorm.config.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTypeOrmOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/config/typeorm.config.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTypeOrmOptions\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTypeOrmOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/config/typeorm.config.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     TypeOrmModuleOptions\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { TypeOrmOptionsFactory, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class TypeOrmConfigService implements TypeOrmOptionsFactory {\n  constructor(private configService: ConfigService) {}\n\n  createTypeOrmOptions(): TypeOrmModuleOptions {\n    return {\n      type: 'postgres' as 'postgres',\n      host: this.configService.get('database.host'),\n      port: this.configService.get('database.port'),\n      username: this.configService.get('database.username'),\n      password: this.configService.get('database.password'),\n      database: this.configService.get('database.name'),\n      entities: [`${__dirname}/../**/*.entity.{js,ts}`],\n      synchronize: this.configService.get('database.synchronize'),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskDTO.html":{"url":"classes/UpdateTaskDTO.html","title":"class - UpdateTaskDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/task/dto/updateTask.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                status\n                            \n                            \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/dto/updateTask.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/dto/updateTask.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/task/dto/updateTask.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString, IsIn } from 'class-validator';\nimport { TaskStatus } from '../enums/taskStatus.enum';\n\nexport class UpdateTaskDTO {\n  @IsOptional()\n  @IsString()\n  title?: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsOptional()\n  @IsIn([...Object.values(TaskStatus)])\n  status?: TaskStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/models/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dateTimeCreated\n                            \n                            \n                                dateTimeModified\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                tasks\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateTimeCreated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/models/user.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateTimeModified\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/models/user.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/models/user.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/models/user.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/models/user.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tasks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Task[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/models/user.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/models/user.entity.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  Entity,\n  Unique,\n  OneToMany,\n} from 'typeorm';\nimport { Task } from '../../task/models/task.entity';\n\n@Entity()\n@Unique(['username'])\nexport class User extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column()\n  salt: string;\n\n  @OneToMany(() => Task, (task) => task.user)\n  tasks: Task[];\n\n  @CreateDateColumn()\n  dateTimeCreated: Date;\n\n  @UpdateDateColumn()\n  dateTimeModified: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/repository/user.respository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                loggerService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                signInUser\n                            \n                            \n                                    Private\n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loggerService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new LoggerService(LoggerContext.USERREPOSITORY)\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/repository/user.respository.ts:19\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDTO: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/repository/user.respository.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/repository/user.respository.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signInUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signInUser(signInUserDTO: SignInUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/repository/user.respository.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInUserDTO\n                                    \n                                                SignInUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(inputPassword: string, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/repository/user.respository.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { genSalt, hash } from 'bcrypt';\nimport {\n  ConflictException,\n  InternalServerErrorException,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { User } from '../models/user.entity';\nimport { CreateUserDTO } from '../dto/createUser.dto';\nimport { CreateUserResponse } from '../dto/createUserResponse.dto';\nimport { SignInUserDTO } from '../dto/signInUser.dto';\nimport { JwtPayload } from '../interfaces/jwtPayload.interface';\nimport { LoggerContext } from '../../logger/enums/loggerContext.enum';\nimport { LoggerService } from '../../logger/logger.service';\n\n@EntityRepository(User)\nexport class UserRepository extends Repository {\n  private loggerService = new LoggerService(LoggerContext.USERREPOSITORY);\n\n  async createUser(createUserDTO: CreateUserDTO): Promise {\n    const { username, password } = createUserDTO;\n\n    const result = await this.hashPassword(password);\n\n    const partialUser = this.create({\n      username,\n      password: result.hashedPassword,\n      salt: result.salt,\n    });\n\n    try {\n      const user = await partialUser.save();\n\n      this.loggerService.log(`User with username ${username} created`);\n\n      return {\n        id: user.id,\n        username: user.username,\n        dateTimeCreated: user.dateTimeCreated,\n      };\n    } catch (error) {\n      if (error.code === '23505') {\n        const errorMessage = `User with username ${username} already exists`;\n        this.loggerService.error(errorMessage);\n        throw new ConflictException(errorMessage);\n      } else {\n        this.loggerService.error(\n          `Failed to created user with username ${username}: ${error.stack}`,\n        );\n        throw new InternalServerErrorException();\n      }\n    }\n  }\n\n  async signInUser(signInUserDTO: SignInUserDTO): Promise {\n    const { username, password } = signInUserDTO;\n\n    const user = await this.findOne({ username });\n\n    if (!user) {\n      const errorMessage = `User with username ${username} does not exist`;\n      this.loggerService.error(errorMessage);\n      throw new NotFoundException(errorMessage);\n    }\n\n    const comparePasswordResult = await this.validatePassword(password, user);\n\n    if (!comparePasswordResult) {\n      const errorMessage = `Passwords do not match`;\n      this.loggerService.error(errorMessage);\n      throw new UnauthorizedException(errorMessage);\n    }\n\n    return { username: user.username };\n  }\n\n  private async hashPassword(\n    password: string,\n  ): Promise {\n    const salt = await genSalt();\n    const hashedPassword = await hash(password, salt);\n    return { hashedPassword, salt };\n  }\n\n  private async validatePassword(\n    inputPassword: string,\n    user: User,\n  ): Promise {\n    const inputPasswordHash = await hash(inputPassword, user.salt);\n\n    if (inputPasswordHash === user.password) return true;\n\n    return false;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            injectable\n            JwtConfigService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            injectable\n            TypeOrmConfigService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interfaces/configuration.interface.ts\n            \n            interface\n            Configuration\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            APP_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            APP_VERSION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/decorators/getUser.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/accessToken.dto.ts\n            \n            class\n            AccessToken\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/createUser.dto.ts\n            \n            class\n            CreateUserDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/createUser.dto.ts\n            \n            variable\n            passwordRegex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/createUserResponse.dto.ts\n            \n            class\n            CreateUserResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/signInUser.dto.ts\n            \n            class\n            SignInUserDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/jwtPayload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            class\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/models/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/auth/repository/user.respository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/health/dto/healthResponse.dto.ts\n            \n            class\n            HealthResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/task/dto/createTask.dto.ts\n            \n            class\n            CreateTaskDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/task/dto/filterTask.dto.ts\n            \n            class\n            FilterTaskDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/task/dto/taskResponse.dto.ts\n            \n            class\n            TaskResponse\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/task/dto/updateTask.dto.ts\n            \n            class\n            UpdateTaskDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/task/interfaces/taskService.interface.ts\n            \n            interface\n            ITaskService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/task/models/task.entity.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/task/repository/task.repository.ts\n            \n            class\n            TaskRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/task/task.controller.ts\n            \n            controller\n            TaskController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/task/task.service.ts\n            \n            injectable\n            TaskService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/task/tests/mocks/authGuard.mock.ts\n            \n            variable\n            mockGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/task/tests/mocks/taskService.mock.ts\n            \n            class\n            TaskServiceMock\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.4.2\n        \n            @nestjs/config : ^0.4.2\n        \n            @nestjs/core : ^7.4.2\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.4.2\n        \n            @nestjs/swagger : ^4.5.12\n        \n            @nestjs/typeorm : ^7.1.0\n        \n            @types/bcrypt : ^3.0.0\n        \n            @types/passport : ^1.0.4\n        \n            @types/passport-jwt : ^3.0.3\n        \n            bcrypt : ^4.0.1\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.12.2\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.3.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.2\n        \n            swagger-ui-express : ^4.1.4\n        \n            typeorm : ^0.2.25\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LoggerContext   (src/.../loggerContext.enum.ts)\n                        \n                        \n                            LogLevels   (src/.../loggerLevels.enum.ts)\n                        \n                        \n                            TaskStatus   (src/.../taskStatus.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/logger/enums/loggerContext.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        LoggerContext\n                    \n                \n                        \n                            \n                                 BOOTSTRAP\n                            \n                        \n                        \n                            \n                                Value : Bootstrap\n                            \n                        \n                        \n                            \n                                 TASKCONTROLLER\n                            \n                        \n                        \n                            \n                                Value : TaskController\n                            \n                        \n                        \n                            \n                                 TASKSERVICE\n                            \n                        \n                        \n                            \n                                Value : TaskService\n                            \n                        \n                        \n                            \n                                 TASKREPOSITORY\n                            \n                        \n                        \n                            \n                                Value : TaskRepository\n                            \n                        \n                        \n                            \n                                 AUTHCONTROLLER\n                            \n                        \n                        \n                            \n                                Value : AuthController\n                            \n                        \n                        \n                            \n                                 USERREPOSITORY\n                            \n                        \n                        \n                            \n                                Value : UserRepository\n                            \n                        \n            \n        \n\n    src/modules/logger/enums/loggerLevels.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        LogLevels\n                    \n                \n                        \n                            \n                                 LOG\n                            \n                        \n                        \n                            \n                                Value : log\n                            \n                        \n                        \n                            \n                                 VERBOSE\n                            \n                        \n                        \n                            \n                                Value : verbose\n                            \n                        \n                        \n                            \n                                 DEBUG\n                            \n                        \n                        \n                            \n                                Value : debug\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n                        \n                            \n                                 WARN\n                            \n                        \n                        \n                            \n                                Value : warn\n                            \n                        \n            \n        \n\n    src/modules/task/enums/taskStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                Value : OPEN\n                            \n                        \n                        \n                            \n                                 CLOSED\n                            \n                        \n                        \n                            \n                                Value : CLOSED\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTaskModule\n\nTaskModule\n\nTaskModule -->\n\nAuthModule->TaskModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAuthModule -->\n\nLoggerModule->AuthModule\n\n\n\nTaskModule -->\n\nLoggerModule->TaskModule\n\n\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nLoggerService \n\nLoggerService \n\nLoggerService  -->\n\nLoggerModule->LoggerService \n\n\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nLoggerService\n\nLoggerService\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            APP_NAME   (src/.../main.ts)\n                        \n                        \n                            APP_VERSION   (src/.../main.ts)\n                        \n                        \n                            GetUser   (src/.../getUser.decorator.ts)\n                        \n                        \n                            mockGuard   (src/.../authGuard.mock.ts)\n                        \n                        \n                            passwordRegex   (src/.../createUser.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            APP_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.npm_package_name\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            APP_VERSION\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.npm_package_version\n                        \n                    \n\n\n            \n        \n\n    src/modules/auth/decorators/getUser.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/modules/task/tests/mocks/authGuard.mock.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockGuard\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CanActivate\n\n                        \n                    \n                    \n                        \n                            Default value : { canActivate: () => true }\n                        \n                    \n\n\n            \n        \n\n    src/modules/auth/dto/createUser.dto.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            passwordRegex\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new RegExp(\n  /((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).{8,32}$/,\n)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
